package com.softisland.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class Skcoin_sol_Skcoin extends Contract {
    private static final String BINARY = "60c0604052600660808190527f536b636f696e000000000000000000000000000000000000000000000000000060a09081526200004091600091906200021b565b506040805180820190915260038082527f534b430000000000000000000000000000000000000000000000000000000000602090920191825262000087916001916200021b565b506000600281905568056bc75e2d63100000600555600a805461ff001960ff19909116600117169055600c55348015620000c057600080fd5b5060405160208062003277833981016040908152905160038054600160a060020a031916600160a060020a0390921691909117905533600090815260066020908152918120805460ff19908116600190811790925560139093527f0b9d2c0c271bb30544eb78c59bdaebdae2728e5f65814c07768a0abe90ed192380548416821790557ff4b2859895858d6aa26d656e4999d552f6a869b74c43bba7d2a941c4d22c355980548416821790557f522e87d3d671f2915034f38e0229384befcd14fcb6842a4a7158cb5222bace8f80548416821790557f6759aee28a1e27f96db48dd13fe412311d635680c93408acd764c50a218587ab80548416821790557fa99929f5c249e2f9655a45139c730f0431f93353b362acf84480b7e0c10ad3ce805484168217905560329091527f23e460dc4eb22fd2fec096707d574f3e410bff1375b44b85e4667fd983d1c0c48054909216179055620002c0565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025e57805160ff19168380011785556200028e565b828001600101855582156200028e579182015b828111156200028e57825182559160200191906001019062000271565b506200029c929150620002a0565b5090565b620002bd91905b808211156200029c5760008155600101620002a7565b90565b612fa780620002d06000396000f30060806040526004361061029d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146102a257806310d0ffdd1461032c57806318160ddd146103565780631b1686b61461036b578063214dda841461038057806325425363146103a957806327dffba6146103da5780632dec59ef146103f1578063313ce5671461040e57806338fceea3146104395780633c7d6f30146104515780633f4ba83a14610466578063432458161461047b5780634b75033414610493578063507fcdaf146104a857806351392041146104bd57806354c99367146104de57806356d399e8146105025780635c975abb146105175780635ccb54601461052c5780636135e08414610541578063677342ce1461055657806370a082311461056e57806376be15851461058f5780637b89eef2146105b05780637fd3471a146105c5578063812039c6146105dd5780638328b610146105f25780638456cb591461060a57806387c950581461061f57806395d89b4114610645578063965447d91461065a578063a3a06c54146103da578063a9059cbb14610672578063aaaa950d14610696578063b53b8d7a146106b0578063b607068c146106c5578063b84c8246146106da578063ba93d5e514610733578063bcaa218e14610754578063c257c85114610769578063c47f002714610781578063c4dbf622146107da578063c80a3aa6146107f2578063cc03c34214610857578063ccb5336514610878578063d161b56a1461088d578063e4849b32146108a2578063e625d515146108ba578063e9fad8ee146108cf578063ecf56d82146108e4578063f088d547146108fc578063f42c56c214610910578063f8ead7cf14610928578063fdc89f7314610949578063ffcb1edb14610961575b600080fd5b3480156102ae57600080fd5b506102b7610976565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102f15781810151838201526020016102d9565b50505050905090810190601f16801561031e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561033857600080fd5b50610344600435610a04565b60408051918252519081900360200190f35b34801561036257600080fd5b50610344610a67565b34801561037757600080fd5b50610344610a6e565b34801561038c57600080fd5b50610395610a74565b604080519115158252519081900360200190f35b3480156103b557600080fd5b506103be610a82565b60408051600160a060020a039092168252519081900360200190f35b3480156103e657600080fd5b506103ef610a91565b005b610344600435600160a060020a036024351660ff60443516610ac0565b34801561041a57600080fd5b50610423610c4e565b6040805160ff9092168252519081900360200190f35b34801561044557600080fd5b506103ef600435610c53565b34801561045d57600080fd5b506103ef610c76565b34801561047257600080fd5b506103ef610c98565b34801561048757600080fd5b50610344600435610cfe565b34801561049f57600080fd5b50610344610ebf565b3480156104b457600080fd5b50610344610f6a565b3480156104c957600080fd5b50610344600160a060020a0360043516610f70565b3480156104ea57600080fd5b50610395600160a060020a0360043516602435610f8b565b34801561050e57600080fd5b50610344611158565b34801561052357600080fd5b5061039561115e565b34801561053857600080fd5b50610344611167565b34801561054d57600080fd5b5061034461116d565b34801561056257600080fd5b50610344600435611180565b34801561057a57600080fd5b50610344600160a060020a03600435166111bb565b34801561059b57600080fd5b50610395600160a060020a03600435166111d6565b3480156105bc57600080fd5b506103446111eb565b3480156105d157600080fd5b506103ef6004356111fb565b3480156105e957600080fd5b5061034461121e565b3480156105fe57600080fd5b506103ef600435611224565b34801561061657600080fd5b506103ef61125d565b34801561062b57600080fd5b506103ef600160a060020a036004351660243515156112ef565b34801561065157600080fd5b506102b7611338565b34801561066657600080fd5b50610344600435611392565b34801561067e57600080fd5b50610395600160a060020a03600435166024356113a6565b610344600160a060020a036004351660ff60243516611551565b3480156106bc57600080fd5b506103ef611669565b3480156106d157600080fd5b50610423611aa3565b3480156106e657600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103ef943694929360249392840191908190840183828082843750949750611ae49650505050505050565b34801561073f57600080fd5b506103ef600160a060020a0360043516611b19565b34801561076057600080fd5b50610344611b66565b34801561077557600080fd5b50610344600435611b71565b34801561078d57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103ef943694929360249392840191908190840183828082843750949750611bdc9650505050505050565b3480156107e657600080fd5b50610344600435611c0d565b3480156107fe57600080fd5b50610807611c9a565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561084357818101518382015260200161082b565b505050509050019250505060405180910390f35b34801561086357600080fd5b506103ef600160a060020a0360043516611cfc565b34801561088457600080fd5b506103ef611d82565b34801561089957600080fd5b50610344611dbe565b3480156108ae57600080fd5b506103ef600435611dc4565b3480156108c657600080fd5b50610344612122565b3480156108db57600080fd5b506103ef612127565b3480156108f057600080fd5b5061034460043561219c565b610344600160a060020a03600435166123e1565b34801561091c57600080fd5b50610344600435612463565b34801561093457600080fd5b50610344600160a060020a036004351661249d565b34801561095557600080fd5b506103446004356124de565b34801561096d57600080fd5b506103446124ec565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109fc5780601f106109d1576101008083540402835291602001916109fc565b820191906000526020600020905b8154815290600101906020018083116109df57829003601f168201915b505050505081565b33600090815260156020526040812054819081908190610a4190606490610a3590889060ff1663ffffffff6124f216565b9063ffffffff61252416565b9250610a53858463ffffffff61253b16565b9150610a5e8261219c565b95945050505050565b6002545b90565b60095481565b600a54610100900460ff1681565b600454600160a060020a031681565b3360009081526006602052604090205460ff161515610aaf57600080fd5b600a805461ff001916610100179055565b33600090815260066020526040812054819081908190819060ff168015610ae95750600a5460ff165b80610af75750600a5460ff16155b1515610b0257600080fd5b336000818152600f6020908152604080832054601490925290912054919550935060ff168015610b33575060ff8616155b15610b4857610b42348861254d565b50610b54565b610b528787611551565b505b336000908152600f6020526040902054610b6e908461253b565b60048054604080517f746f6b656e546f506f696e744279536b63436f6e74726163742875696e74323581527f362c616464726573732c75696e743235362900000000000000000000000000006020820152815190819003603201812063ffffffff7c01000000000000000000000000000000000000000000000000000000009182900490811690910282529381018d9052336024820152604481018590529051939550600160a060020a03909116926064808301926000929190829003018183875af1925050509050801515610c4357600080fd5b509695505050505050565b601281565b3360009081526006602052604090205460ff161515610c7157600080fd5b600255565b600b54621275000142118015610c8d5750600b5415155b1515610aaf57600080fd5b3360009081526006602052604090205460ff161515610cb657600080fd5b600a5460ff161515610cc757600080fd5b600a805460ff1916905560405133907faeb196d352664784d1900b0e7414a8face7d29f4dae8c4b0cf68ed477423bbf490600090a2565b600080808080808080655af3107a4000891015610d65576040805160e560020a62461bcd02815260206004820152601d60248201527f547269656420746f2073656c6c20746f6f2066657720746f6b656e732e000000604482015290519081900360640190fd5b6007546002546000985088975011610d7f57889650610dec565b600754600254118015610d985750600754896002540310155b15610da557889550610dec565b600754600254118015610dbd57506007548960025403105b1561029d57600754600254610dd79163ffffffff61253b16565b9550610de9898763ffffffff61253b16565b96505b8587018914610df757fe5b8615610e2357610e20670de0b6b3a7640000610a3589660251e66909d00063ffffffff6124f216565b94505b8515610ea557610e636003610a356002610e57610e5261258f620f42400260025461252490919063ffffffff16565b6124de565b9063ffffffff6124f216565b9250610e906003610a356002610e57610e5261258f620f4240028c6002540361252490919063ffffffff16565b9150610ea2838363ffffffff61253b16565b93505b5082840160008111610eb357fe5b98975050505050505050565b600080600080600a60019054906101000a900460ff161580610ee45750600854600954105b15610ef857660251e66909d0009250610f27565b610f0866038d7ea4c6800061219c565b9150816d314dc6448d9338c15b0a00000000811515610f2357fe5b0492505b610f62610f5568010000000000000000610a356064610a35610f483361249d565b899063ffffffff6124f216565b849063ffffffff61253b16565b949350505050565b600b5481565b600160a060020a031660009081526011602052604090205490565b6004546000908190600160a060020a03163314610fa757600080fd5b3360009081526006602052604090205460ff168015610fc85750600a5460ff165b80610fd65750600a5460ff16155b1515610fe157600080fd5b600160a060020a0384166000908152600f602052604090205483111561100657600080fd5b6110246064610a356110178761249d565b869063ffffffff6124f216565b600160a060020a0385166000908152600f6020526040902054909150611050908463ffffffff61253b16565b600160a060020a038086166000908152600f60205260408082209390935560045490911681522054611088908463ffffffff6126d916565b600454600160a060020a039081166000908152600f60209081526040808320949094559187168152601190915220546110c7908263ffffffff61253b16565b600160a060020a0380861660009081526011602052604080822093909355600454909116815220546110ff908263ffffffff6126d916565b60048054600160a060020a03908116600090815260116020908152604091829020949094559154825187815292519082169391881692600080516020612f5c83398151915292908290030190a3600191505b5092915050565b60055481565b600a5460ff1681565b60085481565b60003361117981610f70565b91505b5090565b80600260018201045b818110156111b55780915060028182858115156111a257fe5b04018115156111ad57fe5b049050611189565b50919050565b600160a060020a03166000908152600f602052604090205490565b60066020526000908152604090205460ff1681565b60006111f63361249d565b905090565b3360009081526006602052604090205460ff16151561121957600080fd5b600955565b60085490565b3360009081526006602052604090205460ff16151561124257600080fd5b68056bc75e2d6310000081101561125857600080fd5b600555565b3360009081526006602052604090205460ff16151561127b57600080fd5b3360009081526006602052604090205460ff16801561129c5750600a5460ff165b806112aa5750600a5460ff16155b15156112b557600080fd5b600a805460ff1916600117905560405133907f5ee71a369c8672edded508e624ffc9257fa1ae6886ef32905c18e60196bca39990600090a2565b3360009081526006602052604090205460ff16151561130d57600080fd5b600160a060020a03919091166000908152600660205260409020805460ff1916911515919091179055565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109fc5780601f106109d1576101008083540402835291602001916109fc565b60006113a06002830a612463565b92915050565b600454600090819081908190600160a060020a031633146113c657600080fd5b6402540be40085101580156113ea5750336000908152600f60205260409020548511155b15156113f557600080fd5b600160a060020a038616151561140a57600080fd5b33925084915061142e6064610a356114218661249d565b859063ffffffff6124f216565b600160a060020a0384166000908152600f602052604090205490915061145a908363ffffffff61253b16565b600160a060020a038085166000908152600f6020526040808220939093559088168152205461148f908363ffffffff6126d916565b600160a060020a038088166000908152600f60209081526040808320949094559186168152601190915220546114cb908263ffffffff61253b16565b600160a060020a038085166000908152601160205260408082209390935590881681522054611500908263ffffffff6126d916565b600160a060020a038088166000818152601160209081526040918290209490945580518681529051919392871692600080516020612f5c83398151915292918290030190a350600195945050505050565b33600090815260066020526040812054819060ff1680156115745750600a5460ff165b806115825750600a5460ff16155b151561158d57600080fd5b600a54610100900460ff1615156115cb57503a640ba43b740081118015906115c05750680d8d726b7177a8000060085411155b15156115cb57600080fd5b60ff8084166000908152601360205260409020541615156115eb57600080fd5b336000818152601460209081526040808320805460ff199081166001179091556015835292819020805460ff891694168417905580519384529083019190915280517fc95fc9f67beb97905ada724494d1acfcaa30a3c96b432a0eac1824899f9f97c29281900390910190a1611661348561254d565b505092915050565b33600090815260066020526040812054819081908190819081908190819060ff16151561169557600080fd5b600a54610100900460ff1615156116ab57600080fd5b600d549750600095505b600e548610156119d657600e8054879081106116cd57fe5b600091825260209091200154600354600160a060020a039182169650168514156116f6576119cb565b600160a060020a0385166000908152600f602052604081205490945084101561184057600c54600160a060020a038616600090815260116020526040902054600d5461174d9291610a35919063ffffffff6124f216565b600c54600160a060020a03871660009081526011602052604090205491955061178191610a3590879063ffffffff6124f216565b600c54909350611797908463ffffffff6126d916565b600c55600160a060020a0385166000908152600f60205260409020546117c3908563ffffffff6126d916565b600160a060020a0386166000908152600f60209081526040808320939093556011905220546117f8908463ffffffff6126d916565b600160a060020a03861660008181526011602090815260409182902093909355805187815290519987019991923092600080516020612f5c8339815191529281900390910190a35b600160a060020a0385166000908152601060205260409020549150831515806118695750600082115b1561197457600c54600160a060020a0386166000908152601160205260409020546118a09190610a3590859063ffffffff6124f216565b600160a060020a038616600090815260106020526040812055600c549091506118cf908263ffffffff6126d916565b600c55600160a060020a0385166000908152600f60205260409020546118fb908363ffffffff6126d916565b600160a060020a0386166000908152600f6020908152604080832093909355601190522054611930908263ffffffff6126d916565b600160a060020a038616600081815260116020908152604091829020939093558051858152905191923092600080516020612f5c8339815191529281900390910190a35b831515806119825750600082115b156119cb5760408051838152602081018690528151600160a060020a038816927ff23c0d9317f6be471607052a1b5b49e380a207ec651da595ba9f882470f72835928290030190a25b6001909501946116b5565b600d548714611a55576040805160e560020a62461bcd02815260206004820152603160248201527f6469766964656420726573756c7420646f65736e2774206d617463682077697460448201527f682074686520746f74616c20746f6b656e000000000000000000000000000000606482015290519081900360840190fd5b6000600d55600e54604080518a81526020810192909252805133927f6925a594cdedf404fb393921c171ac5a20037af918e28f8abc05c58334c2090c92908290030190a25050505050505050565b3360008181526014602052604081205490919060ff161515611ac457600080fd5b600160a060020a031660009081526015602052604090205460ff16919050565b3360009081526006602052604090205460ff161515611b0257600080fd5b8051611b15906001906020840190612e51565b5050565b3360009081526006602052604090205460ff161515611b3757600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60006111f6336111bb565b60008060008060006002548611151515611b8a57600080fd5b611b9386610cfe565b9350611b9e3361249d565b9250611bc068010000000000000000610a35606481888863ffffffff6124f216565b9150611bd2848363ffffffff61253b16565b9695505050505050565b3360009081526006602052604090205460ff161515611bfa57600080fd5b8051611b15906000906020840190612e51565b600080600080600a60019054906101000a900460ff161580611c325750600854600954105b15611c4657660251e66909d0009250611c75565b611c5666038d7ea4c6800061219c565b9150816d314dc6448d9338c15b0a00000000811515611c7157fe5b0492505b610a5e83611c8e6064610a35838a63ffffffff6124f216565b9063ffffffff6126d916565b6060600e805480602002602001604051908101604052809291908181526020018280548015611cf257602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611cd4575b5050505050905090565b3360009081526006602052604090205460ff161515611d1a57600080fd5b60038054600160a060020a0392831673ffffffffffffffffffffffffffffffffffffffff199091161780825582166000908152601460209081526040808320805460ff1990811660011790915593549094168252601590529190912080549091166032179055565b3360009081526006602052604090205460ff161515611da057600080fd5b600b5415611dad57600080fd5b600a805461ff001916905542600b55565b60075481565b6000806000806000806000806000611dda611b66565b11611de457600080fd5b3360009081526006602052604090205460ff168015611e055750600a5460ff165b80611e135750600a5460ff16155b1515611e1e57600080fd5b600a54610100900460ff161515611e3457600080fd5b336000908152600f6020526040902054891115611e5057600080fd5b889750611e5b610ebf565b9650611e663361249d565b9550851515611e7c576802000000000000000095505b680200000000000000008610801590611e9e5750683200000000000000008611155b1515611ea957600080fd5b611ebe6064610a358a8963ffffffff6124f216565b9450611ed66064610a3587603c63ffffffff6124f216565b9350611ee8858563ffffffff61253b16565b97859003979250611f0c68010000000000000000610a358a8963ffffffff6124f216565b9150611f1788610cfe565b9050600954811115611f2d576000600955611f37565b6009805482900390555b600254611f4a908963ffffffff61253b16565b600255600c54611f60908363ffffffff61253b16565b600c55336000908152600f6020526040902054611f83908963ffffffff61253b16565b336000908152600f6020908152604080832093909355601190522054611faf908363ffffffff61253b16565b33600090815260116020908152604080832093909355600354600160a060020a03168252600f90522054611fe9908463ffffffff6126d916565b600354600160a060020a03166000908152600f602052604080822092909255600d8054870190559051339183156108fc02918491818181858888f1935050505015801561203a573d6000803e3d6000fd5b5060408051828152602081018b905280820189905260608101889052905133917f9e7640c8084933448e21479747bae0ff2b839fc1969425ea177bd30df8b324c2919081900360800190a26040805185815260208101859052815133927ffe1cd47933291c7a80fef69c5791069ebc8efab82fe495de99753a4c16027e76928290030190a2604080518a8152905130913391600080516020612f5c8339815191529181900360200190a3600354604080518581529051600160a060020a03909216913391600080516020612f5c833981519152919081900360200190a3505050505050505050565b303190565b33600090815260066020526040812054819060ff16801561214a5750600a5460ff165b806121585750600a5460ff16155b151561216357600080fd5b600a54610100900460ff16151561217957600080fd5b5050336000818152600f602052604081205490811115611b1557611b1581611dc4565b6000808080808080808080655af3107a40008b1161222a576040805160e560020a62461bcd02815260206004820152602860248201527f547269656420746f2062757920746f6b656e73207769746820746f6f206c697460448201527f746c65206574682e000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600a54610100900460ff1615156122655761225e660251e66909d000610a358d670de0b6b3a764000063ffffffff6124f216565b99506123d3565b60085460095460009a508a99501061227f578a97506122ec565b60085460095410801561229857506008548b6009540111155b156122a5578a98506122ec565b6008546009541080156122bd57506008548b60095401115b1561029d576009546008546122d79163ffffffff61253b16565b98506122e98b8a63ffffffff61253b16565b97505b8888018b146122f757fe5b60009650869550881561232a57612327660251e66909d000610a358b670de0b6b3a764000063ffffffff6124f216565b96505b87156123c1578861235a6003610a356002610e57610e5261258f620f42400260025461252490919063ffffffff16565b019450878501935061238661258f610e576123816002610a358a600363ffffffff6124f216565b611392565b92506123a761258f610e576123816002610a3589600363ffffffff6124f216565b91506123b9828463ffffffff61253b16565b620f42400295505b50858501600081116123cf57fe5b8099505b505050505050505050919050565b33600090815260066020526040812054819060ff1680156124045750600a5460ff165b806124125750600a5460ff16155b151561241d57600080fd5b600a54610100900460ff16151561243357600080fd5b503360008181526014602052604090205460ff16151561245257600080fd5b61245c348461254d565b5050919050565b80600360018201045b818110156111b5578091506003816002028283028581151561248a57fe5b040181151561249557fe5b04905061246c565b600160a060020a0381166000908152600f602090815260408083205460119092528220546113a091680100000000000000009091029063ffffffff61252416565b60006113a06003830a611180565b600c5490565b6000808315156125055760009150611151565b5082820282848281151561251557fe5b041461251d57fe5b9392505050565b600080828481151561253257fe5b04949350505050565b60008282111561254757fe5b50900390565b600080600080600080655af3107a4000881015806125755750600454600160a060020a031633145b15156125f1576040805160e560020a62461bcd02815260206004820152602f60248201527f547269656420746f206275792062656c6f7720746865206d696e20657468206260448201527f7579696e207468726573686f6c642e0000000000000000000000000000000000606482015290519081900360840190fd5b600a54610100900460ff1615156126125761260c88886126e8565b506126ce565b3360009081526015602052604090205460ff16945061263085611c0d565b93506126486002610e578a606463ffffffff61252416565b925061265a888463ffffffff61253b16565b91506126658261219c565b905061267188886128f7565b50604080518981526020810183905280820186905260ff87166060820152600160a060020a0389166080820152905133917ffe3ac80ec95b3bbcf01b0b389cc27c089970282a6a8a95ac4fd7936603dc22d7919081900360a00190a25b505050505092915050565b60008282018381101561251d57fe5b6000806000806000600a60019054906101000a900460ff1615151561270c57600080fd5b8693506127256002610e5786606463ffffffff61252416565b9250612737848463ffffffff61253b16565b93506127428461219c565b600254909250612758908363ffffffff6126d916565b60025560095461276e908563ffffffff6126d916565b600955600880548501908190556007805484019055680d8d726b7177a80000101561279857600080fd5b3233146127a457600080fd5b336000908152601260205260409020805485019055600854680d8d726b7177a8000014156127dc57600a805461ff0019166101001790555b336000908152600f60205260409020546127fc908363ffffffff6126d916565b336000818152600f602052604090209190915561281890612dc4565b821561285a57600354604051600160a060020a039091169084156108fc029085906000818181858888f19350505050158015612858573d6000803e3d6000fd5b505b50818301869003801561286957fe5b6040805188815260208101849052660251e66909d0008183015260006060820152600160a060020a0388166080820152905133917ffe3ac80ec95b3bbcf01b0b389cc27c089970282a6a8a95ac4fd7936603dc22d7919081900360a00190a260408051838152905133913091600080516020612f5c8339815191529181900360200190a35050505092915050565b6000612901612ecb565b600a54600090610100900460ff16151561291a57600080fd5b6101206040519081016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815250915061297f6002610e5760648861252490919063ffffffff16565b60e0830181905261299790869063ffffffff61253b16565b61010083018190526129a89061219c565b60a0830152336000908152601560205260409020546101008301516129dc91606491610a359160ff1663ffffffff6124f216565b606083018190526101008301516129f89163ffffffff61253b16565b6101008301819052612a099061219c565b60c0830181905260a0830151612a249163ffffffff61253b16565b608083015260a0820151600254612a409163ffffffff6126d916565b600255610100820151600954612a5b9163ffffffff6126d916565b60098190556060830151612a75919063ffffffff6126d916565b600955600160a060020a03841615801590612a995750600160a060020a0384163314155b8015612abf5750600554600160a060020a0385166000908152600f602052604090205410155b15612b2657612ae16064610a35601e85608001516124f290919063ffffffff16565b808352600160a060020a038516600090815260106020526040902054612b0c9163ffffffff6126d916565b600160a060020a0385166000908152601060205260409020555b612b436064610a35603c85608001516124f290919063ffffffff16565b6020830181905282516080840151612b729291612b66919063ffffffff61253b16565b9063ffffffff61253b16565b60408301526020820151600d54612b8e9163ffffffff6126d916565b600d55604080830151600354600160a060020a03166000908152600f6020529190912054612bc19163ffffffff6126d916565b600354600160a060020a03166000908152600f602052604090205560e082015115612c265760035460e0830151604051600160a060020a039092169181156108fc0291906000818181858888f19350505050158015612c24573d6000803e3d6000fd5b505b60c0820151336000908152600f6020526040902054612c4a9163ffffffff6126d916565b336000908152600f602090815260408083209390935560159052205460c0830151612c9e91612c82919060ff1663ffffffff6124f216565b336000908152601160205260409020549063ffffffff6126d916565b3360009081526011602090815260408083209390935560159052205460c0830151612ce591612cd6919060ff1663ffffffff6124f216565b600c549063ffffffff6126d916565b600c55612cf133612dc4565b50606081015161010082015160e083015101018490038015612d0f57fe5b5060a081015160c0820151602083015183516040850151010101038015612d3257fe5b81516020808401516040808601518151600160a060020a038a16815293840194909452828101919091526060820192909252905133917f7c58c6dc95677e6c8c2200be395fc5d5db1b0774c2819554609ff82bafbd8ae2919081900360800190a260c0820151604080519182525133913091600080516020612f5c8339815191529181900360200190a3505092915050565b600160a060020a0381166000908152601660205260409020541515612e4e57600e805490612df59060018301612f18565b600160a060020a0382166000908152601660205260409020819055600e80548392908110612e1f57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612e9257805160ff1916838001178555612ebf565b82800160010185558215612ebf579182015b82811115612ebf578251825591602001919060010190612ea4565b5061117c929150612f41565b610120604051908101604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b815481835581811115612f3c57600083815260209020612f3c918101908301612f41565b505050565b610a6b91905b8082111561117c5760008155600101612f475600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058207c877271d57a7959e4ac3e8e7e6145b582c50ecb27f6a34d75416d6000c37ff30029";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_CALCULATETOKENSRECEIVED = "calculateTokensReceived";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_CURRENTETHINVESTED = "currentEthInvested";

    public static final String FUNC_REGULARPHASE = "regularPhase";

    public static final String FUNC_BANKROLLADDRESS = "bankrollAddress";

    public static final String FUNC_STARTREGULARPHASE = "startRegularPhase";

    public static final String FUNC_ETHBUYGAMEPOINTS = "ethBuyGamePoints";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_SETTESTTOTALSUPPLY = "setTestTotalSupply";

    public static final String FUNC_PUBLICSTARTREGULARPHASE = "publicStartRegularPhase";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_TOKENSTOETHER_ = "tokensToEther_";

    public static final String FUNC_SELLPRICE = "sellPrice";

    public static final String FUNC_ICOOPENTIME = "icoOpenTime";

    public static final String FUNC_GETDIVIDENDTOKENBALANCEOF = "getDividendTokenBalanceOf";

    public static final String FUNC_REDEEMGAMEPOINTS = "redeemGamePoints";

    public static final String FUNC_STAKINGREQUIREMENT = "stakingRequirement";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_ETHINVESTEDDURINGICO = "ethInvestedDuringICO";

    public static final String FUNC_MYDIVIDENDTOKENS = "myDividendTokens";

    public static final String FUNC_SQRT = "sqrt";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_ADMINISTRATORS = "administrators";

    public static final String FUNC_GETMYAVERAGEDIVIDENDRATE = "getMyAverageDividendRate";

    public static final String FUNC_SETTESTCURRENTETHINVESTED = "setTestCurrentEthInvested";

    public static final String FUNC_TOTALETHERICORECEIVED = "totalEtherICOReceived";

    public static final String FUNC_SETSTAKINGREQUIREMENT = "setStakingRequirement";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_SETADMINISTRATOR = "setAdministrator";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOPOWEROFTWOTHIRDS = "toPowerOfTwoThirds";

    public static final String FUNC_ENDICOPHASE = "endICOPhase";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_BUYANDSETDIVPERCENTAGE = "buyAndSetDivPercentage";

    public static final String FUNC_DIVIDE = "divide";

    public static final String FUNC_GETMYDIVIDENDRATE = "getMyDividendRate";

    public static final String FUNC_SETSYMBOL = "setSymbol";

    public static final String FUNC_SETBANKROLLADDRESS = "setBankrollAddress";

    public static final String FUNC_MYFRONTENDTOKENS = "myFrontEndTokens";

    public static final String FUNC_CALCULATEETHERRECEIVED = "calculateEtherReceived";

    public static final String FUNC_SETNAME = "setName";

    public static final String FUNC_BUYPRICE = "buyPrice";

    public static final String FUNC_ALLHOLDERS = "allHolders";

    public static final String FUNC_SETPLATFORMADDRESS = "setPlatformAddress";

    public static final String FUNC_STARTICOPHASE = "startICOPhase";

    public static final String FUNC_TOKENSMINTEDDURINGICO = "tokensMintedDuringICO";

    public static final String FUNC_SELL = "sell";

    public static final String FUNC_TOTALETHERBALANCE = "totalEtherBalance";

    public static final String FUNC_EXIT = "exit";

    public static final String FUNC_ETHERTOTOKENS_ = "etherToTokens_";

    public static final String FUNC_BUY = "buy";

    public static final String FUNC_CBRT = "cbrt";

    public static final String FUNC_GETUSERAVERAGEDIVIDENDRATE = "getUserAverageDividendRate";

    public static final String FUNC_TOPOWEROFTHREEHALVES = "toPowerOfThreeHalves";

    public static final String FUNC_GETDIVIDENDTOKENSUPPLY = "getDividendTokenSupply";

    public static final Event ONTOKENPURCHASE_EVENT = new Event("OnTokenPurchase", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ONTOKENSELL_EVENT = new Event("OnTokenSell", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DIVIDE_EVENT = new Event("Divide", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event USERDIVIDENDRATE_EVENT = new Event("UserDividendRate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BOUGHTASSETSDETAIL_EVENT = new Event("BoughtAssetsDetail", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SELLASSETSDETAIL_EVENT = new Event("SellAssetsDetail", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DIVIDENDDETAIL_EVENT = new Event("DividendDetail", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event PAUSE_EVENT = new Event("Pause", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event UNPAUSE_EVENT = new Event("Unpause", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    protected Skcoin_sol_Skcoin(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Skcoin_sol_Skcoin(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> calculateTokensReceived(BigInteger _etherToSpend) {
        final Function function = new Function(FUNC_CALCULATETOKENSRECEIVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_etherToSpend)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> currentEthInvested() {
        final Function function = new Function(FUNC_CURRENTETHINVESTED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> regularPhase() {
        final Function function = new Function(FUNC_REGULARPHASE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> bankrollAddress() {
        final Function function = new Function(FUNC_BANKROLLADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> startRegularPhase() {
        final Function function = new Function(
                FUNC_STARTREGULARPHASE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> ethBuyGamePoints(BigInteger _id, String _referredBy, BigInteger divChoice, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_ETHBUYGAMEPOINTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id), 
                new org.web3j.abi.datatypes.Address(_referredBy), 
                new org.web3j.abi.datatypes.generated.Uint8(divChoice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setTestTotalSupply(BigInteger _tokenSupply) {
        final Function function = new Function(
                FUNC_SETTESTTOTALSUPPLY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenSupply)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> publicStartRegularPhase() {
        final Function function = new Function(
                FUNC_PUBLICSTARTREGULARPHASE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> unpause() {
        final Function function = new Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> tokensToEther_(BigInteger _tokens) {
        final Function function = new Function(FUNC_TOKENSTOETHER_, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokens)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> sellPrice() {
        final Function function = new Function(FUNC_SELLPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> icoOpenTime() {
        final Function function = new Function(FUNC_ICOOPENTIME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getDividendTokenBalanceOf(String _customerAddress) {
        final Function function = new Function(FUNC_GETDIVIDENDTOKENBALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_customerAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> redeemGamePoints(String _caller, BigInteger _amountOfTokens) {
        final Function function = new Function(
                FUNC_REDEEMGAMEPOINTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_caller), 
                new org.web3j.abi.datatypes.generated.Uint256(_amountOfTokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> stakingRequirement() {
        final Function function = new Function(FUNC_STAKINGREQUIREMENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> paused() {
        final Function function = new Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> ethInvestedDuringICO() {
        final Function function = new Function(FUNC_ETHINVESTEDDURINGICO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> myDividendTokens() {
        final Function function = new Function(FUNC_MYDIVIDENDTOKENS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> sqrt(BigInteger x) {
        final Function function = new Function(FUNC_SQRT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> balanceOf(String _customerAddress) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_customerAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> administrators(String param0) {
        final Function function = new Function(FUNC_ADMINISTRATORS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> getMyAverageDividendRate() {
        final Function function = new Function(FUNC_GETMYAVERAGEDIVIDENDRATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setTestCurrentEthInvested(BigInteger _currentEthInvested) {
        final Function function = new Function(
                FUNC_SETTESTCURRENTETHINVESTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_currentEthInvested)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalEtherICOReceived() {
        final Function function = new Function(FUNC_TOTALETHERICORECEIVED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setStakingRequirement(BigInteger _amountOfTokens) {
        final Function function = new Function(
                FUNC_SETSTAKINGREQUIREMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amountOfTokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> pause() {
        final Function function = new Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setAdministrator(String _newAdmin, Boolean _status) {
        final Function function = new Function(
                FUNC_SETADMINISTRATOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newAdmin), 
                new org.web3j.abi.datatypes.Bool(_status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> toPowerOfTwoThirds(BigInteger x) {
        final Function function = new Function(FUNC_TOPOWEROFTWOTHIRDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> endICOPhase() {
        final Function function = new Function(
                FUNC_ENDICOPHASE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transfer(String _toAddress, BigInteger _amountOfTokens) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_toAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(_amountOfTokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> buyAndSetDivPercentage(String _referredBy, BigInteger _divChoice, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BUYANDSETDIVPERCENTAGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_referredBy), 
                new org.web3j.abi.datatypes.generated.Uint8(_divChoice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> divide() {
        final Function function = new Function(
                FUNC_DIVIDE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getMyDividendRate() {
        final Function function = new Function(FUNC_GETMYDIVIDENDRATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setSymbol(String _symbol) {
        final Function function = new Function(
                FUNC_SETSYMBOL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_symbol)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setBankrollAddress(String _bankrollAddress) {
        final Function function = new Function(
                FUNC_SETBANKROLLADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_bankrollAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> myFrontEndTokens() {
        final Function function = new Function(FUNC_MYFRONTENDTOKENS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> calculateEtherReceived(BigInteger _tokensToSell) {
        final Function function = new Function(FUNC_CALCULATEETHERRECEIVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokensToSell)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setName(String _name) {
        final Function function = new Function(
                FUNC_SETNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> buyPrice(BigInteger dividendRate) {
        final Function function = new Function(FUNC_BUYPRICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(dividendRate)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<List> allHolders() {
        final Function function = new Function(FUNC_ALLHOLDERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setPlatformAddress(String _platformAddress) {
        final Function function = new Function(
                FUNC_SETPLATFORMADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_platformAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> startICOPhase() {
        final Function function = new Function(
                FUNC_STARTICOPHASE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> tokensMintedDuringICO() {
        final Function function = new Function(FUNC_TOKENSMINTEDDURINGICO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> sell(BigInteger _amountOfTokens) {
        final Function function = new Function(
                FUNC_SELL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amountOfTokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalEtherBalance() {
        final Function function = new Function(FUNC_TOTALETHERBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> exit() {
        final Function function = new Function(
                FUNC_EXIT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> etherToTokens_(BigInteger _etherAmount) {
        final Function function = new Function(FUNC_ETHERTOTOKENS_, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_etherAmount)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> buy(String _referredBy, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BUY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_referredBy)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> cbrt(BigInteger x) {
        final Function function = new Function(FUNC_CBRT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getUserAverageDividendRate(String user) {
        final Function function = new Function(FUNC_GETUSERAVERAGEDIVIDENDRATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> toPowerOfThreeHalves(BigInteger x) {
        final Function function = new Function(FUNC_TOPOWEROFTHREEHALVES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getDividendTokenSupply() {
        final Function function = new Function(FUNC_GETDIVIDENDTOKENSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<Skcoin_sol_Skcoin> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _platformAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_platformAddress)));
        return deployRemoteCall(Skcoin_sol_Skcoin.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<Skcoin_sol_Skcoin> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _platformAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_platformAddress)));
        return deployRemoteCall(Skcoin_sol_Skcoin.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<OnTokenPurchaseEventResponse> getOnTokenPurchaseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ONTOKENPURCHASE_EVENT, transactionReceipt);
        ArrayList<OnTokenPurchaseEventResponse> responses = new ArrayList<OnTokenPurchaseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OnTokenPurchaseEventResponse typedResponse = new OnTokenPurchaseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.incomingEthereum = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokensMinted = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenPrice = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.divChoice = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.referrer = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OnTokenPurchaseEventResponse> onTokenPurchaseEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OnTokenPurchaseEventResponse>() {
            @Override
            public OnTokenPurchaseEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ONTOKENPURCHASE_EVENT, log);
                OnTokenPurchaseEventResponse typedResponse = new OnTokenPurchaseEventResponse();
                typedResponse.log = log;
                typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.incomingEthereum = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.tokensMinted = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenPrice = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.divChoice = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.referrer = (String) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<OnTokenPurchaseEventResponse> onTokenPurchaseEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ONTOKENPURCHASE_EVENT));
        return onTokenPurchaseEventObservable(filter);
    }

    public List<OnTokenSellEventResponse> getOnTokenSellEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ONTOKENSELL_EVENT, transactionReceipt);
        ArrayList<OnTokenSellEventResponse> responses = new ArrayList<OnTokenSellEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OnTokenSellEventResponse typedResponse = new OnTokenSellEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ethereumEarned = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokensBurned = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenPrice = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.divRate = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OnTokenSellEventResponse> onTokenSellEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OnTokenSellEventResponse>() {
            @Override
            public OnTokenSellEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ONTOKENSELL_EVENT, log);
                OnTokenSellEventResponse typedResponse = new OnTokenSellEventResponse();
                typedResponse.log = log;
                typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ethereumEarned = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.tokensBurned = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenPrice = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.divRate = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<OnTokenSellEventResponse> onTokenSellEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ONTOKENSELL_EVENT));
        return onTokenSellEventObservable(filter);
    }

    public List<DivideEventResponse> getDivideEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DIVIDE_EVENT, transactionReceipt);
        ArrayList<DivideEventResponse> responses = new ArrayList<DivideEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DivideEventResponse typedResponse = new DivideEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.administrator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.totalToken = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.holderNumber = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DivideEventResponse> divideEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, DivideEventResponse>() {
            @Override
            public DivideEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DIVIDE_EVENT, log);
                DivideEventResponse typedResponse = new DivideEventResponse();
                typedResponse.log = log;
                typedResponse.administrator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.totalToken = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.holderNumber = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<DivideEventResponse> divideEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DIVIDE_EVENT));
        return divideEventObservable(filter);
    }

    public List<UserDividendRateEventResponse> getUserDividendRateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(USERDIVIDENDRATE_EVENT, transactionReceipt);
        ArrayList<UserDividendRateEventResponse> responses = new ArrayList<UserDividendRateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserDividendRateEventResponse typedResponse = new UserDividendRateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.divRate = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UserDividendRateEventResponse> userDividendRateEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, UserDividendRateEventResponse>() {
            @Override
            public UserDividendRateEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(USERDIVIDENDRATE_EVENT, log);
                UserDividendRateEventResponse typedResponse = new UserDividendRateEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.divRate = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<UserDividendRateEventResponse> userDividendRateEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USERDIVIDENDRATE_EVENT));
        return userDividendRateEventObservable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventObservable(filter);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.tokenOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventObservable(filter);
    }

    public List<BoughtAssetsDetailEventResponse> getBoughtAssetsDetailEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BOUGHTASSETSDETAIL_EVENT, transactionReceipt);
        ArrayList<BoughtAssetsDetailEventResponse> responses = new ArrayList<BoughtAssetsDetailEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BoughtAssetsDetailEventResponse typedResponse = new BoughtAssetsDetailEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.buyer = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.referrer = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.referrerToken = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenHolder = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.toPlatformToken = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<BoughtAssetsDetailEventResponse> boughtAssetsDetailEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, BoughtAssetsDetailEventResponse>() {
            @Override
            public BoughtAssetsDetailEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BOUGHTASSETSDETAIL_EVENT, log);
                BoughtAssetsDetailEventResponse typedResponse = new BoughtAssetsDetailEventResponse();
                typedResponse.log = log;
                typedResponse.buyer = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.referrer = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.referrerToken = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenHolder = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.toPlatformToken = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<BoughtAssetsDetailEventResponse> boughtAssetsDetailEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOUGHTASSETSDETAIL_EVENT));
        return boughtAssetsDetailEventObservable(filter);
    }

    public List<SellAssetsDetailEventResponse> getSellAssetsDetailEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SELLASSETSDETAIL_EVENT, transactionReceipt);
        ArrayList<SellAssetsDetailEventResponse> responses = new ArrayList<SellAssetsDetailEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SellAssetsDetailEventResponse typedResponse = new SellAssetsDetailEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.seller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tokenHolder = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.toPlatformToken = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SellAssetsDetailEventResponse> sellAssetsDetailEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, SellAssetsDetailEventResponse>() {
            @Override
            public SellAssetsDetailEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SELLASSETSDETAIL_EVENT, log);
                SellAssetsDetailEventResponse typedResponse = new SellAssetsDetailEventResponse();
                typedResponse.log = log;
                typedResponse.seller = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.tokenHolder = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.toPlatformToken = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<SellAssetsDetailEventResponse> sellAssetsDetailEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SELLASSETSDETAIL_EVENT));
        return sellAssetsDetailEventObservable(filter);
    }

    public List<DividendDetailEventResponse> getDividendDetailEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DIVIDENDDETAIL_EVENT, transactionReceipt);
        ArrayList<DividendDetailEventResponse> responses = new ArrayList<DividendDetailEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DividendDetailEventResponse typedResponse = new DividendDetailEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.referrerToken = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenHolder = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DividendDetailEventResponse> dividendDetailEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, DividendDetailEventResponse>() {
            @Override
            public DividendDetailEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DIVIDENDDETAIL_EVENT, log);
                DividendDetailEventResponse typedResponse = new DividendDetailEventResponse();
                typedResponse.log = log;
                typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.referrerToken = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.tokenHolder = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<DividendDetailEventResponse> dividendDetailEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DIVIDENDDETAIL_EVENT));
        return dividendDetailEventObservable(filter);
    }

    public List<PauseEventResponse> getPauseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSE_EVENT, transactionReceipt);
        ArrayList<PauseEventResponse> responses = new ArrayList<PauseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PauseEventResponse typedResponse = new PauseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.adminAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<PauseEventResponse> pauseEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, PauseEventResponse>() {
            @Override
            public PauseEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSE_EVENT, log);
                PauseEventResponse typedResponse = new PauseEventResponse();
                typedResponse.log = log;
                typedResponse.adminAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<PauseEventResponse> pauseEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSE_EVENT));
        return pauseEventObservable(filter);
    }

    public List<UnpauseEventResponse> getUnpauseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UNPAUSE_EVENT, transactionReceipt);
        ArrayList<UnpauseEventResponse> responses = new ArrayList<UnpauseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpauseEventResponse typedResponse = new UnpauseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.adminAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UnpauseEventResponse> unpauseEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, UnpauseEventResponse>() {
            @Override
            public UnpauseEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UNPAUSE_EVENT, log);
                UnpauseEventResponse typedResponse = new UnpauseEventResponse();
                typedResponse.log = log;
                typedResponse.adminAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<UnpauseEventResponse> unpauseEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSE_EVENT));
        return unpauseEventObservable(filter);
    }

    public static Skcoin_sol_Skcoin load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Skcoin_sol_Skcoin(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Skcoin_sol_Skcoin load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Skcoin_sol_Skcoin(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class OnTokenPurchaseEventResponse {
        public Log log;

        public String customerAddress;

        public BigInteger incomingEthereum;

        public BigInteger tokensMinted;

        public BigInteger tokenPrice;

        public BigInteger divChoice;

        public String referrer;
    }

    public static class OnTokenSellEventResponse {
        public Log log;

        public String customerAddress;

        public BigInteger ethereumEarned;

        public BigInteger tokensBurned;

        public BigInteger tokenPrice;

        public BigInteger divRate;
    }

    public static class DivideEventResponse {
        public Log log;

        public String administrator;

        public BigInteger totalToken;

        public BigInteger holderNumber;
    }

    public static class UserDividendRateEventResponse {
        public Log log;

        public String user;

        public BigInteger divRate;
    }

    public static class TransferEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger tokens;
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String tokenOwner;

        public String spender;

        public BigInteger tokens;
    }

    public static class BoughtAssetsDetailEventResponse {
        public Log log;

        public String buyer;

        public String referrer;

        public BigInteger referrerToken;

        public BigInteger tokenHolder;

        public BigInteger toPlatformToken;
    }

    public static class SellAssetsDetailEventResponse {
        public Log log;

        public String seller;

        public BigInteger tokenHolder;

        public BigInteger toPlatformToken;
    }

    public static class DividendDetailEventResponse {
        public Log log;

        public String customerAddress;

        public BigInteger referrerToken;

        public BigInteger tokenHolder;
    }

    public static class PauseEventResponse {
        public Log log;

        public String adminAddress;
    }

    public static class UnpauseEventResponse {
        public Log log;

        public String adminAddress;
    }
}
