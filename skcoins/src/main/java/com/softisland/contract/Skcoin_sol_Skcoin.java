package com.softisland.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class Skcoin_sol_Skcoin extends Contract {
    private static final String BINARY = "60c0604052600660808190527f536b436f696e000000000000000000000000000000000000000000000000000060a09081526200004091600091906200021b565b506040805180820190915260038082527f534b430000000000000000000000000000000000000000000000000000000000602090920191825262000087916001916200021b565b506000600281905568056bc75e2d63100000600555600a805461ff001960ff19909116600117169055600c55348015620000c057600080fd5b506040516020806200349d833981016040908152905160038054600160a060020a031916600160a060020a0390921691909117905533600090815260066020908152918120805460ff19908116600190811790925560149093527fa1930aa930426c54c34daad2b9ada7c5d0ef0c96078a3c5bb79f6fa6602c4a7a80548416821790557f116126bec5aaa49b347e966c49378cf0c441de9121e306ea3d824584a9615aa280548416821790557f65f9512343925c57130fd77667cb42fc83560c400ede0c87f3de7c6c27cf09a680548416821790557fa3c034a0398f2cd3465cee88fec2489b78fe26933af4d394d6c87fc4cf00fa7780548416821790557fdc608d679ca2b8977f31a5640baa109b4ba9c60363787f534cdcba96703081e9805484168217905560329091527fa957878ffc621f5fb7a1c801449d0f7b662147306c0a391d4ae324bada7982358054909216179055620002c0565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025e57805160ff19168380011785556200028e565b828001600101855582156200028e579182015b828111156200028e57825182559160200191906001019062000271565b506200029c929150620002a0565b5090565b620002bd91905b808211156200029c5760008155600101620002a7565b90565b6131cd80620002d06000396000f3006080604052600436106102a75763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b81146102ac57806306fdde03146102df57806310d0ffdd1461036957806318160ddd146103815780631b1686b614610396578063214dda84146103ab57806325425363146103d457806327dffba6146104055780632dec59ef1461041c578063313ce567146104395780633c7d6f30146104645780633f4ba83a14610479578063432458161461048e5780634b750334146104a6578063507fcdaf146104bb57806351392041146104d057806354c99367146104f157806356d399e8146105155780635c975abb1461052a5780635ccb54601461053f5780635d69830d146105545780636135e0841461056c578063677342ce1461058157806370a082311461059957806376be1585146105ba5780637b89eef2146105db578063812039c6146105f05780638328b610146106055780638456cb591461061d57806387c950581461063257806395d89b4114610658578063965447d91461066d578063a9059cbb14610685578063aaaa950d146106a9578063afb5b3f0146106c3578063b53b8d7a146106db578063b607068c146106f0578063b84c824614610705578063ba93d5e51461075e578063bcaa218e1461077f578063bd93758f14610794578063c257c851146107b5578063c47f0027146107cd578063c4dbf62214610826578063c80a3aa61461083e578063cc03c342146108a3578063ccb53365146108c4578063d161b56a146108d9578063e4849b32146108ee578063e625d51514610906578063e9fad8ee1461091b578063ecf56d8214610930578063f42c56c214610948578063f4ab8b4d14610960578063f8ead7cf14610978578063fdc89f7314610999578063ffcb1edb146109b1575b600080fd5b3480156102b857600080fd5b506102cd600160a060020a03600435166109c6565b60408051918252519081900360200190f35b3480156102eb57600080fd5b506102f4610a01565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561032e578181015183820152602001610316565b50505050905090810190601f16801561035b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561037557600080fd5b506102cd600435610a8f565b34801561038d57600080fd5b506102cd610af2565b3480156103a257600080fd5b506102cd610af9565b3480156103b757600080fd5b506103c0610aff565b604080519115158252519081900360200190f35b3480156103e057600080fd5b506103e9610b0d565b60408051600160a060020a039092168252519081900360200190f35b34801561041157600080fd5b5061041a610b1c565b005b6102cd600435600160a060020a036024351660ff60443516610b4b565b34801561044557600080fd5b5061044e610ca1565b6040805160ff9092168252519081900360200190f35b34801561047057600080fd5b5061041a610ca6565b34801561048557600080fd5b5061041a610cc8565b34801561049a57600080fd5b506102cd600435610d2e565b3480156104b257600080fd5b506102cd610f08565b3480156104c757600080fd5b506102cd610fae565b3480156104dc57600080fd5b506102cd600160a060020a0360043516610fb4565b3480156104fd57600080fd5b506103c0600160a060020a0360043516602435610fcf565b34801561052157600080fd5b506102cd6111b7565b34801561053657600080fd5b506103c06111bd565b34801561054b57600080fd5b506102cd6111c6565b34801561056057600080fd5b506102cd6004356111cc565b34801561057857600080fd5b506102cd61120d565b34801561058d57600080fd5b506102cd600435611220565b3480156105a557600080fd5b506102cd600160a060020a0360043516611255565b3480156105c657600080fd5b506103c0600160a060020a0360043516611270565b3480156105e757600080fd5b506102cd611285565b3480156105fc57600080fd5b506102cd611295565b34801561061157600080fd5b5061041a60043561129b565b34801561062957600080fd5b5061041a6112d4565b34801561063e57600080fd5b5061041a600160a060020a03600435166024351515611366565b34801561066457600080fd5b506102f46113af565b34801561067957600080fd5b506102cd600435611409565b34801561069157600080fd5b506103c0600160a060020a036004351660243561141d565b6102cd600160a060020a036004351660ff60243516611602565b3480156106cf57600080fd5b506102cd60043561171a565b3480156106e757600080fd5b5061041a611728565b3480156106fc57600080fd5b5061044e611838565b34801561071157600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261041a9436949293602493928401919081908401838280828437509497506118799650505050505050565b34801561076a57600080fd5b5061041a600160a060020a03600435166118ae565b34801561078b57600080fd5b506102cd6118fb565b3480156107a057600080fd5b506102cd600160a060020a0360043516611906565b3480156107c157600080fd5b506102cd600435611921565b3480156107d957600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261041a9436949293602493928401919081908401838280828437509497506119899650505050505050565b34801561083257600080fd5b506102cd6004356119ba565b34801561084a57600080fd5b50610853611a47565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561088f578181015183820152602001610877565b505050509050019250505060405180910390f35b3480156108af57600080fd5b5061041a600160a060020a0360043516611aa9565b3480156108d057600080fd5b5061041a611b2f565b3480156108e557600080fd5b506102cd611b6b565b3480156108fa57600080fd5b5061041a600435611b71565b34801561091257600080fd5b506102cd611ffa565b34801561092757600080fd5b5061041a611fff565b34801561093c57600080fd5b506102cd600435612074565b34801561095457600080fd5b506102cd6004356122d3565b34801561096c57600080fd5b506102cd60043561230d565b34801561098457600080fd5b506102cd600160a060020a036004351661231b565b3480156109a557600080fd5b506102cd60043561239e565b3480156109bd57600080fd5b506102cd6123ac565b600160a060020a0316600090815260186020908152604080832054601190925290912054600d54680100000000000000009102919091030490565b6000805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a875780601f10610a5c57610100808354040283529160200191610a87565b820191906000526020600020905b815481529060010190602001808311610a6a57829003601f168201915b505050505081565b33600090815260166020526040812054819081908190610acc90606490610ac090889060ff1663ffffffff6123b216565b9063ffffffff6123dd16565b9250610ade858463ffffffff6123f416565b9150610ae982612074565b95945050505050565b6002545b90565b60095481565b600a54610100900460ff1681565b600454600160a060020a031681565b3360009081526006602052604090205460ff161515610b3a57600080fd5b600a805461ff001916610100179055565b3360009081526006602052604081205481908190819060ff168015610b725750600a5460ff165b80610b805750600a5460ff16155b1515610b8b57600080fd5b336000908152600f60205260409020549250610ba78686611602565b50336000908152600f6020526040902054610bc290846123f4565b60048054604080517f746f6b656e546f506f696e744279536b63436f6e74726163742875696e74323581527f362c616464726573732c75696e743235362900000000000000000000000000006020820152815190819003603201812063ffffffff7c01000000000000000000000000000000000000000000000000000000009182900490811690910282529381018c9052336024820152604481018590529051939550600160a060020a03909116926064808301926000929190829003018183875af1925050509050801515610c9757600080fd5b5095945050505050565b601281565b600b54621275000142118015610cbd5750600b5415155b1515610b3a57600080fd5b3360009081526006602052604090205460ff161515610ce657600080fd5b600a5460ff161515610cf757600080fd5b600a805460ff1916905560405133907faeb196d352664784d1900b0e7414a8face7d29f4dae8c4b0cf68ed477423bbf490600090a2565b600080808080808080655af3107a4000891015610dac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f547269656420746f2073656c6c20746f6f2066657720746f6b656e732e000000604482015290519081900360640190fd5b6007546002546000985088975011610dc657889650610e33565b600754600254118015610ddf5750600754896002540310155b15610dec57889550610e33565b600754600254118015610e0457506007548960025403105b156102a757600754600254610e1e9163ffffffff6123f416565b9550610e30898763ffffffff6123f416565b96505b8587018914610e3e57fe5b8615610e6a57610e67670de0b6b3a7640000610ac0896602c8f0ea36607b63ffffffff6123b216565b94505b8515610eee57610eab6101f4610ac06003610e9f610e9a6130cb620f4240026002546123dd90919063ffffffff16565b61171a565b9063ffffffff6123b216565b9250610ed96101f4610ac06003610e9f610e9a6130cb620f4240028c600254036123dd90919063ffffffff16565b9150610eeb838363ffffffff6123f416565b93505b5082840160008111610efc57fe5b98975050505050505050565b600080600080600a60019054906101000a900460ff161580610f2d5750600854600954105b15610f41576602c8f0ea36607b9250610f70565b610f5166038d7ea4c68000612074565b9150816d314dc6448d9338c15b0a00000000811515610f6c57fe5b0492505b610fa6610f9968010000000000000000610ac0610f8c3361231b565b879063ffffffff6123b216565b849063ffffffff6123f416565b949350505050565b600b5481565b600160a060020a031660009081526011602052604090205490565b6004546000908190600160a060020a03163314610feb57600080fd5b3360009081526006602052604090205460ff16801561100c5750600a5460ff165b8061101a5750600a5460ff16155b151561102557600080fd5b600160a060020a0384166000908152600f602052604090205483111561104a57600080fd5b6110548484612406565b600160a060020a0385166000908152600f6020526040902054909150611080908463ffffffff6123f416565b600160a060020a038086166000908152600f602052604080822093909355600454909116815220546110b8908463ffffffff61258116565b600454600160a060020a039081166000908152600f60209081526040808320949094559187168152601190915220546110f7908263ffffffff6123f416565b600160a060020a03808616600090815260116020526040808220939093556004549091168152205461112f908263ffffffff61258116565b60048054600160a060020a03908116600090815260116020908152604080832095909555600d80548a8516808552601884528785208054928a029092039091559054855485168452928690208054938802909301909255925484518881529451921693909260008051602061318283398151915292918290030190a3600191505b5092915050565b60055481565b600a5460ff1681565b60085481565b80600560018201045b81811015611207578091506005816004026004830a858115156111f457fe5b04018115156111ff57fe5b0490506111d5565b50919050565b60003361121981610fb4565b91505b5090565b80600260018201045b8181101561120757809150600281828581151561124257fe5b040181151561124d57fe5b049050611229565b600160a060020a03166000908152600f602052604090205490565b60066020526000908152604090205460ff1681565b60006112903361231b565b905090565b60085490565b3360009081526006602052604090205460ff1615156112b957600080fd5b68056bc75e2d631000008110156112cf57600080fd5b600555565b3360009081526006602052604090205460ff1615156112f257600080fd5b3360009081526006602052604090205460ff1680156113135750600a5460ff165b806113215750600a5460ff16155b151561132c57600080fd5b600a805460ff1916600117905560405133907f5ee71a369c8672edded508e624ffc9257fa1ae6886ef32905c18e60196bca39990600090a2565b3360009081526006602052604090205460ff16151561138457600080fd5b600160a060020a03919091166000908152600660205260409020805460ff1916911515919091179055565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a875780601f10610a5c57610100808354040283529160200191610a87565b60006114176002830a6122d3565b92915050565b600454600090819081908190600160a060020a0316331461143d57600080fd5b6402540be40085101580156114615750336000908152600f60205260409020548511155b151561146c57600080fd5b600160a060020a038616151561148157600080fd5b3392508491506114ad68010000000000000000610ac06114a08961231b565b859063ffffffff6123b216565b600160a060020a0384166000908152600f60205260409020549091506114d9908363ffffffff6123f416565b600160a060020a038085166000908152600f6020526040808220939093559088168152205461150e908363ffffffff61258116565b600160a060020a038088166000908152600f602090815260408083209490945591861681526011909152205461154a908263ffffffff6123f416565b600160a060020a03808516600090815260116020526040808220939093559088168152205461157f908263ffffffff61258116565b600160a060020a03878116600081815260116020908152604080832095909555600d8054898616808552601884528785208054928a0290920190915590546003549095168352918590208054948702909403909355835186815293519193909260008051602061318283398151915292918290030190a350600195945050505050565b33600090815260066020526040812054819060ff1680156116255750600a5460ff165b806116335750600a5460ff16155b151561163e57600080fd5b600a54610100900460ff16151561167c57503a640ba43b740081118015906116715750681043561a882930000060085411155b151561167c57600080fd5b60ff80841660009081526014602052604090205416151561169c57600080fd5b336000818152601560209081526040808320805460ff199081166001179091556016835292819020805460ff891694168417905580519384529083019190915280517fc95fc9f67beb97905ada724494d1acfcaa30a3c96b432a0eac1824899f9f97c29281900390910190a16117123485612590565b505092915050565b60006114176005830a6122d3565b600080611734336109c6565b1161173e57600080fd5b600a54610100900460ff16151561175457600080fd5b61175d336109c6565b3360009081526018602090815260408083208054680100000000000000008602019055600f90915290205490915061179b908263ffffffff61258116565b336000908152600f60209081526040808320939093556013905220546117c7908263ffffffff61258116565b33600081815260136020908152604091829020939093558051848152905191927fc48f48eaa9b408c45a6aabe04ea44a920472ddfc760356ee335d3fd16f0857b492918290030190a2604080518281529051339130916000805160206131828339815191529181900360200190a350565b3360008181526015602052604081205490919060ff16151561185957600080fd5b600160a060020a031660009081526016602052604090205460ff16919050565b3360009081526006602052604090205460ff16151561189757600080fd5b80516118aa906001906020840190613077565b5050565b3360009081526006602052604090205460ff1615156118cc57600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600061129033611255565b600160a060020a031660009081526013602052604090205490565b6000806000806000600254861115151561193a57600080fd5b61194386610d2e565b935061194e3361231b565b925061196d68010000000000000000610ac0868663ffffffff6123b216565b915061197f848363ffffffff6123f416565b9695505050505050565b3360009081526006602052604090205460ff1615156119a757600080fd5b80516118aa906000906020840190613077565b600080600080600a60019054906101000a900460ff1615806119df5750600854600954105b156119f3576602c8f0ea36607b9250611a22565b611a0366038d7ea4c68000612074565b9150816d314dc6448d9338c15b0a00000000811515611a1e57fe5b0492505b610ae983611a3b6064610ac0838a63ffffffff6123b216565b9063ffffffff61258116565b6060600e805480602002602001604051908101604052809291908181526020018280548015611a9f57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611a81575b5050505050905090565b3360009081526006602052604090205460ff161515611ac757600080fd5b60038054600160a060020a0392831673ffffffffffffffffffffffffffffffffffffffff199091161780825582166000908152601560209081526040808320805460ff1990811660011790915593549094168252601690529190912080549091166032179055565b3360009081526006602052604090205460ff161515611b4d57600080fd5b600b5415611b5a57600080fd5b600a805461ff001916905542600b55565b60075481565b600080600080600080600080600080611b886118fb565b11611b9257600080fd5b3360009081526006602052604090205460ff168015611bb35750600a5460ff165b80611bc15750600a5460ff16155b1515611bcc57600080fd5b600a54610100900460ff161515611be257600080fd5b336000908152600f60205260409020548a1115611bfe57600080fd5b899850611c09610f08565b9750611c143361231b565b965067051eb851eb851eb88710801590611c3657506780000000000000008711155b80611c63575086158015611c63575033600090815260136020908152604080832054600f90925290912054145b1515611c6e57600080fd5b33600090815260186020908152604080832054601190925290912054600d54680100000000000000009291020304988901989550611cbb866801000000000000000063ffffffff6123b216565b3360008181526018602052604090208054909201909155611cdc908b612406565b60035490955060009450600160a060020a0316331480611d0c5750600c5433600090815260116020526040902054145b15611d1657600093505b611d2c6064610ac086603c63ffffffff6123b216565b9250611d3e848463ffffffff6123f416565b600d549985900399909250611d59908663ffffffff6123b216565b3360009081526018602052604090208054919091039055611d7989610d2e565b9050600954811115611d8f576000600955611d99565b6009805482900390555b600254611dac908a63ffffffff6123f416565b600255600c54611dc2908663ffffffff6123f416565b600c55336000908152600f6020526040902054611de5908b63ffffffff6123f416565b336000908152600f6020908152604080832093909355601190522054611e11908663ffffffff6123f416565b33600090815260116020908152604080832093909355600354600160a060020a03168252600f90522054611e4b908363ffffffff61258116565b60038054600160a060020a039081166000908152600f60209081526040808320959095559254909116815260139091522054611e8d908363ffffffff61258116565b600354600160a060020a0316600090815260136020526040812091909155600c541115611ee457611ee0600c54680100000000000000008502811515611ecf57fe5b600d5491900463ffffffff61258116565b600d555b604051339082156108fc029083906000818181858888f19350505050158015611f11573d6000803e3d6000fd5b5060408051828152602081018c90528082018a905260608101899052905133917f9e7640c8084933448e21479747bae0ff2b839fc1969425ea177bd30df8b324c2919081900360800190a26040805184815260208101849052815133927ffe1cd47933291c7a80fef69c5791069ebc8efab82fe495de99753a4c16027e76928290030190a2604080518b81529051309133916000805160206131828339815191529181900360200190a3600354604080518481529051600160a060020a03909216913391600080516020613182833981519152919081900360200190a350505050505050505050565b303190565b33600090815260066020526040812054819060ff1680156120225750600a5460ff165b806120305750600a5460ff16155b151561203b57600080fd5b600a54610100900460ff16151561205157600080fd5b5050336000818152600f6020526040812054908111156118aa576118aa81611b71565b6000808080808080808080655af3107a40008b1161211957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f547269656420746f2062757920746f6b656e73207769746820746f6f206c697460448201527f746c65206574682e000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600a54610100900460ff1615156121545761214d6602c8f0ea36607b610ac08d670de0b6b3a764000063ffffffff6123b216565b99506122c5565b60085460095460009a508a99501061216e578a97506121db565b60085460095410801561218757506008548b6009540111155b15612194578a98506121db565b6008546009541080156121ac57506008548b60095401115b156102a7576009546008546121c69163ffffffff6123f416565b98506121d88b8a63ffffffff6123f416565b97505b8888018b146121e657fe5b600096508695508815612219576122166602c8f0ea36607b610ac08b670de0b6b3a764000063ffffffff6123b216565b96505b87156122b3578861224a6101f4610ac06003610e9f610e9a6130cb620f4240026002546123dd90919063ffffffff16565b01945087850193506122776130cb610e9f6122726003610ac08a6101f463ffffffff6123b216565b61230d565b92506122996130cb610e9f6122726003610ac0896101f463ffffffff6123b216565b91506122ab828463ffffffff6123f416565b620f42400295505b50858501600081116122c157fe5b8099505b505050505050505050919050565b80600360018201045b8181101561120757809150600381600202828302858115156122fa57fe5b040181151561230557fe5b0490506122dc565b60006114176003830a6111cc565b600160a060020a038116600090815260136020908152604080832054600f9092528220548291612351919063ffffffff6123f416565b90508015156123635760009150611207565b600160a060020a0383166000908152601160205260409020546123979068010000000000000000028263ffffffff6123dd16565b9392505050565b60006114176003830a611220565b600c5490565b6000808315156123c557600091506111b0565b508282028284828115156123d557fe5b041461239757fe5b60008082848115156123eb57fe5b04949350505050565b60008282111561240057fe5b50900390565b600160a060020a0382166000908152600f60205260408120548190819081908190811061243257600080fd5b61243b8761231b565b600160a060020a0388166000908152600f602090815260408083205460139092529091205491945090612474908863ffffffff61258116565b101561249e5761249768010000000000000000610ac0888663ffffffff6123b216565b9350612576565b600160a060020a0387166000908152600f602090815260408083205460139092529091205414156124ef57600160a060020a0387166000908152601360205260408120805488900390559350612576565b600160a060020a038716600090815260136020908152604080832054600f909252909120546125239163ffffffff6123f416565b9150612535868363ffffffff6123f416565b905061255468010000000000000000610ac0848663ffffffff6123b216565b600160a060020a03881660009081526013602052604090208054839003905593505b509195945050505050565b60008282018381101561239757fe5b600080600080600080655af3107a4000881015806125b85750600454600160a060020a031633145b151561264b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f547269656420746f206275792062656c6f7720746865206d696e20657468206260448201527f7579696e207468726573686f6c642e0000000000000000000000000000000000606482015290519081900360840190fd5b600a5460009550859450610100900460ff1615801561268f5750600954681043561a88293000009061268d90611a3b6064610ac08d606263ffffffff6123b216565b115b156126d5576126bc6062610ac06064610e9f600954681043561a88293000006123f490919063ffffffff16565b94506126ce888663ffffffff6123f416565b93506126ea565b600a54610100900460ff1615156126ea578794505b600a54610100900460ff16156126fe578793505b84156127105761270e85886127e5565b505b83156127da57336000908152601660205260409020546127329060ff166119ba565b925061274a6002610e9f86606463ffffffff6123dd16565b915061276461275f858463ffffffff6123f416565b612074565b90506127708488612a20565b503360008181526016602090815260409182902054825188815291820185905281830187905260ff166060820152600160a060020a038a16608082015290517ffe3ac80ec95b3bbcf01b0b389cc27c089970282a6a8a95ac4fd7936603dc22d79181900360a00190a25b505050505092915050565b6000806000806000600a60019054906101000a900460ff1615151561280957600080fd5b8693506128226002610e9f86606463ffffffff6123dd16565b9250612834848463ffffffff6123f416565b935061283f84612074565b600254909250612855908363ffffffff61258116565b60025560095461286b908563ffffffff61258116565b600955600880548501908190556007805484019055681043561a8829300000101561289557600080fd5b3233146128a157600080fd5b336000908152601260205260409020805485019055600854681043561a882930000014156128d957600a805461ff0019166101001790555b336000908152600f60205260409020546128f9908363ffffffff61258116565b336000908152600f6020908152604080832093909355601390522054612925908363ffffffff61258116565b3360008181526013602052604090209190915561294190612fea565b821561298357600354604051600160a060020a039091169084156108fc029085906000818181858888f19350505050158015612981573d6000803e3d6000fd5b505b50818301869003801561299257fe5b60408051888152602081018490526602c8f0ea36607b8183015260006060820152600160a060020a0388166080820152905133917ffe3ac80ec95b3bbcf01b0b389cc27c089970282a6a8a95ac4fd7936603dc22d7919081900360a00190a2604080518381529051339130916000805160206131828339815191529181900360200190a35050505092915050565b6000612a2a6130f1565b6000806000600a60019054906101000a900460ff161515612a4a57600080fd5b61012060405190810160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152509350612aaf6002610e9f60648a6123dd90919063ffffffff16565b60e08501819052612ac790889063ffffffff6123f416565b6101008501819052612ad890612074565b60a085015233600090815260166020526040902054610100850151612b0c91606491610ac09160ff1663ffffffff6123b216565b60608501819052610100850151612b289163ffffffff6123f416565b6101008501819052612b3990612074565b60c0850181905260a0850151612b549163ffffffff6123f416565b608085015260a0840151600254612b709163ffffffff61258116565b600255610100840151600954612b8b9163ffffffff61258116565b60098190556060850151612ba5919063ffffffff61258116565b600955600160a060020a03861615801590612bc95750600160a060020a0386163314155b8015612bef5750600554600160a060020a0387166000908152600f602052604090205410155b15612cbb57612c116064610ac0601e87608001516123b290919063ffffffff16565b808552600160a060020a0387166000908152600f6020526040902054612c3c9163ffffffff61258116565b600160a060020a0387166000908152600f60209081526040808320939093558651601390915291902054612c759163ffffffff61258116565b600160a060020a03871660008181526013602090815260409182902093909355865181519081529051919230926000805160206131828339815191529281900390910190a35b612cd86064610ac0603c87608001516123b290919063ffffffff16565b6020850181905284516080860151612d079291612cfb919063ffffffff6123f416565b9063ffffffff6123f416565b6040808601919091523360009081526016602052205460c0850151612d3b91606491610ac09160ff1663ffffffff6123b216565b600c54909350612d51908463ffffffff61258116565b600c8190556020850151612d8b91612d7c91610ac0906801000000000000000063ffffffff6123b216565b600d549063ffffffff61258116565b600d55600c5460208501516801000000000000000002811515612daa57fe5b600d54336000908152601860209081526040808320805496909504890293890284900390950190935587840151600354600160a060020a03168252600f9093529290922054919350612dfc9190612581565b60038054600160a060020a039081166000908152600f6020908152604080832095909555888501519354909216815260139091529190912054612e449163ffffffff61258116565b600354600160a060020a031660009081526013602052604090205560e084015115612ea95760035460e0850151604051600160a060020a039092169181156108fc0291906000818181858888f19350505050158015612ea7573d6000803e3d6000fd5b505b60c0840151336000908152600f6020526040902054612ecd9163ffffffff61258116565b336000908152600f6020908152604080832093909355601190522054612ef9908463ffffffff61258116565b33600081815260116020526040902091909155612f1590612fea565b50606083015161010084015160e085015101018690038015612f3357fe5b5060a083015160c0840151602085015185516040870151010101038015612f5657fe5b83516020808601516040808801518151600160a060020a038c16815293840194909452828101919091526060820192909252905133917f7c58c6dc95677e6c8c2200be395fc5d5db1b0774c2819554609ff82bafbd8ae2919081900360800190a260c08401516040805191825251339130916000805160206131828339815191529181900360200190a35050505092915050565b600160a060020a038116600090815260176020526040902054151561307457600e80549061301b906001830161313e565b600160a060020a0382166000908152601760205260409020819055600e8054839290811061304557fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106130b857805160ff19168380011785556130e5565b828001600101855582156130e5579182015b828111156130e55782518255916020019190600101906130ca565b5061121c929150613167565b610120604051908101604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b81548183558181111561316257600083815260209020613162918101908301613167565b505050565b610af691905b8082111561121c576000815560010161316d5600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058209b9428bebe5307b0e1eb64005a4e872231e06a1528cbdb5bee359c5faa140bde0029";

    public static final String FUNC_DIVIDENDSOF = "dividendsOf";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_CALCULATETOKENSRECEIVED = "calculateTokensReceived";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_CURRENTETHINVESTED = "currentEthInvested";

    public static final String FUNC_REGULARPHASE = "regularPhase";

    public static final String FUNC_BANKROLLADDRESS = "bankrollAddress";

    public static final String FUNC_STARTREGULARPHASE = "startRegularPhase";

    public static final String FUNC_ETHBUYGAMEPOINTS = "ethBuyGamePoints";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_PUBLICSTARTREGULARPHASE = "publicStartRegularPhase";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_TOKENSTOETHER_ = "tokensToEther_";

    public static final String FUNC_SELLPRICE = "sellPrice";

    public static final String FUNC_ICOOPENTIME = "icoOpenTime";

    public static final String FUNC_GETDIVIDENDTOKENBALANCEOF = "getDividendTokenBalanceOf";

    public static final String FUNC_REDEEMGAMEPOINTS = "redeemGamePoints";

    public static final String FUNC_STAKINGREQUIREMENT = "stakingRequirement";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_ETHINVESTEDDURINGICO = "ethInvestedDuringICO";

    public static final String FUNC_FIVE = "five";

    public static final String FUNC_MYDIVIDENDTOKENS = "myDividendTokens";

    public static final String FUNC_SQRT = "sqrt";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_ADMINISTRATORS = "administrators";

    public static final String FUNC_GETMYAVERAGEDIVIDENDRATE = "getMyAverageDividendRate";

    public static final String FUNC_TOTALETHERICORECEIVED = "totalEtherICOReceived";

    public static final String FUNC_SETSTAKINGREQUIREMENT = "setStakingRequirement";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_SETADMINISTRATOR = "setAdministrator";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOPOWEROFTWOTHIRDS = "toPowerOfTwoThirds";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_BUYANDSETDIVPERCENTAGE = "buyAndSetDivPercentage";

    public static final String FUNC_TOPOWEROFFIVETHIRDS = "toPowerOfFiveThirds";

    public static final String FUNC_DIVIDE = "divide";

    public static final String FUNC_GETMYDIVIDENDRATE = "getMyDividendRate";

    public static final String FUNC_SETSYMBOL = "setSymbol";

    public static final String FUNC_SETBANKROLLADDRESS = "setBankrollAddress";

    public static final String FUNC_MYFRONTENDTOKENS = "myFrontEndTokens";

    public static final String FUNC_GETPURETOKENBALANCE = "getPureTokenBalance";

    public static final String FUNC_CALCULATEETHERRECEIVED = "calculateEtherReceived";

    public static final String FUNC_SETNAME = "setName";

    public static final String FUNC_BUYPRICE = "buyPrice";

    public static final String FUNC_ALLHOLDERS = "allHolders";

    public static final String FUNC_SETPLATFORMADDRESS = "setPlatformAddress";

    public static final String FUNC_STARTICOPHASE = "startICOPhase";

    public static final String FUNC_TOKENSMINTEDDURINGICO = "tokensMintedDuringICO";

    public static final String FUNC_SELL = "sell";

    public static final String FUNC_TOTALETHERBALANCE = "totalEtherBalance";

    public static final String FUNC_EXIT = "exit";

    public static final String FUNC_ETHERTOTOKENS_ = "etherToTokens_";

    public static final String FUNC_CBRT = "cbrt";

    public static final String FUNC_TOPOWEROFTHIRDFIVES = "toPowerOfThirdFives";

    public static final String FUNC_GETUSERAVERAGEDIVIDENDRATE = "getUserAverageDividendRate";

    public static final String FUNC_TOPOWEROFTHREEHALVES = "toPowerOfThreeHalves";

    public static final String FUNC_GETDIVIDENDTOKENSUPPLY = "getDividendTokenSupply";

    public static final Event ONTOKENPURCHASE_EVENT = new Event("OnTokenPurchase", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ONTOKENSELL_EVENT = new Event("OnTokenSell", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DIVIDE_EVENT = new Event("Divide", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event USERDIVIDENDRATE_EVENT = new Event("UserDividendRate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BOUGHTASSETSDETAIL_EVENT = new Event("BoughtAssetsDetail", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SELLASSETSDETAIL_EVENT = new Event("SellAssetsDetail", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event PAUSE_EVENT = new Event("Pause", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event UNPAUSE_EVENT = new Event("Unpause", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    protected Skcoin_sol_Skcoin(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Skcoin_sol_Skcoin(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<BigInteger> dividendsOf(String _customerAddress) {
        final Function function = new Function(FUNC_DIVIDENDSOF, 
                Arrays.<Type>asList(new Address(_customerAddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> calculateTokensReceived(BigInteger _etherToSpend) {
        final Function function = new Function(FUNC_CALCULATETOKENSRECEIVED, 
                Arrays.<Type>asList(new Uint256(_etherToSpend)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> currentEthInvested() {
        final Function function = new Function(FUNC_CURRENTETHINVESTED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> regularPhase() {
        final Function function = new Function(FUNC_REGULARPHASE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> bankrollAddress() {
        final Function function = new Function(FUNC_BANKROLLADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> startRegularPhase() {
        final Function function = new Function(
                FUNC_STARTREGULARPHASE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> ethBuyGamePoints(BigInteger _id, String _referredBy, BigInteger divChoice, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_ETHBUYGAMEPOINTS, 
                Arrays.<Type>asList(new Uint256(_id),
                new Address(_referredBy),
                new Uint8(divChoice)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> publicStartRegularPhase() {
        final Function function = new Function(
                FUNC_PUBLICSTARTREGULARPHASE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> unpause() {
        final Function function = new Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> tokensToEther_(BigInteger _tokens) {
        final Function function = new Function(FUNC_TOKENSTOETHER_, 
                Arrays.<Type>asList(new Uint256(_tokens)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> sellPrice() {
        final Function function = new Function(FUNC_SELLPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> icoOpenTime() {
        final Function function = new Function(FUNC_ICOOPENTIME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getDividendTokenBalanceOf(String _customerAddress) {
        final Function function = new Function(FUNC_GETDIVIDENDTOKENBALANCEOF, 
                Arrays.<Type>asList(new Address(_customerAddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> redeemGamePoints(String _caller, BigInteger _amountOfTokens) {
        final Function function = new Function(
                FUNC_REDEEMGAMEPOINTS, 
                Arrays.<Type>asList(new Address(_caller),
                new Uint256(_amountOfTokens)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> stakingRequirement() {
        final Function function = new Function(FUNC_STAKINGREQUIREMENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> paused() {
        final Function function = new Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> ethInvestedDuringICO() {
        final Function function = new Function(FUNC_ETHINVESTEDDURINGICO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> five(BigInteger x) {
        final Function function = new Function(FUNC_FIVE, 
                Arrays.<Type>asList(new Uint256(x)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> myDividendTokens() {
        final Function function = new Function(FUNC_MYDIVIDENDTOKENS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> sqrt(BigInteger x) {
        final Function function = new Function(FUNC_SQRT, 
                Arrays.<Type>asList(new Uint256(x)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> balanceOf(String _customerAddress) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new Address(_customerAddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> administrators(String param0) {
        final Function function = new Function(FUNC_ADMINISTRATORS, 
                Arrays.<Type>asList(new Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> getMyAverageDividendRate() {
        final Function function = new Function(FUNC_GETMYAVERAGEDIVIDENDRATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> totalEtherICOReceived() {
        final Function function = new Function(FUNC_TOTALETHERICORECEIVED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setStakingRequirement(BigInteger _amountOfTokens) {
        final Function function = new Function(
                FUNC_SETSTAKINGREQUIREMENT, 
                Arrays.<Type>asList(new Uint256(_amountOfTokens)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> pause() {
        final Function function = new Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setAdministrator(String _newAdmin, Boolean _status) {
        final Function function = new Function(
                FUNC_SETADMINISTRATOR, 
                Arrays.<Type>asList(new Address(_newAdmin),
                new Bool(_status)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> toPowerOfTwoThirds(BigInteger x) {
        final Function function = new Function(FUNC_TOPOWEROFTWOTHIRDS, 
                Arrays.<Type>asList(new Uint256(x)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transfer(String _toAddress, BigInteger _amountOfTokens) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Address(_toAddress),
                new Uint256(_amountOfTokens)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> buyAndSetDivPercentage(String _referredBy, BigInteger _divChoice, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BUYANDSETDIVPERCENTAGE, 
                Arrays.<Type>asList(new Address(_referredBy),
                new Uint8(_divChoice)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> toPowerOfFiveThirds(BigInteger x) {
        final Function function = new Function(FUNC_TOPOWEROFFIVETHIRDS, 
                Arrays.<Type>asList(new Uint256(x)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> divide() {
        final Function function = new Function(
                FUNC_DIVIDE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getMyDividendRate() {
        final Function function = new Function(FUNC_GETMYDIVIDENDRATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setSymbol(String _symbol) {
        final Function function = new Function(
                FUNC_SETSYMBOL, 
                Arrays.<Type>asList(new Utf8String(_symbol)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setBankrollAddress(String _bankrollAddress) {
        final Function function = new Function(
                FUNC_SETBANKROLLADDRESS, 
                Arrays.<Type>asList(new Address(_bankrollAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> myFrontEndTokens() {
        final Function function = new Function(FUNC_MYFRONTENDTOKENS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getPureTokenBalance(String user) {
        final Function function = new Function(FUNC_GETPURETOKENBALANCE, 
                Arrays.<Type>asList(new Address(user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> calculateEtherReceived(BigInteger _tokensToSell) {
        final Function function = new Function(FUNC_CALCULATEETHERRECEIVED, 
                Arrays.<Type>asList(new Uint256(_tokensToSell)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setName(String _name) {
        final Function function = new Function(
                FUNC_SETNAME, 
                Arrays.<Type>asList(new Utf8String(_name)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> buyPrice(BigInteger dividendRate) {
        final Function function = new Function(FUNC_BUYPRICE, 
                Arrays.<Type>asList(new Uint256(dividendRate)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<List> allHolders() {
        final Function function = new Function(FUNC_ALLHOLDERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setPlatformAddress(String _platformAddress) {
        final Function function = new Function(
                FUNC_SETPLATFORMADDRESS, 
                Arrays.<Type>asList(new Address(_platformAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> startICOPhase() {
        final Function function = new Function(
                FUNC_STARTICOPHASE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> tokensMintedDuringICO() {
        final Function function = new Function(FUNC_TOKENSMINTEDDURINGICO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> sell(BigInteger _amountOfTokens) {
        final Function function = new Function(
                FUNC_SELL, 
                Arrays.<Type>asList(new Uint256(_amountOfTokens)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalEtherBalance() {
        final Function function = new Function(FUNC_TOTALETHERBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> exit() {
        final Function function = new Function(
                FUNC_EXIT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> etherToTokens_(BigInteger _etherAmount) {
        final Function function = new Function(FUNC_ETHERTOTOKENS_, 
                Arrays.<Type>asList(new Uint256(_etherAmount)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> cbrt(BigInteger x) {
        final Function function = new Function(FUNC_CBRT, 
                Arrays.<Type>asList(new Uint256(x)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> toPowerOfThirdFives(BigInteger x) {
        final Function function = new Function(FUNC_TOPOWEROFTHIRDFIVES, 
                Arrays.<Type>asList(new Uint256(x)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getUserAverageDividendRate(String user) {
        final Function function = new Function(FUNC_GETUSERAVERAGEDIVIDENDRATE, 
                Arrays.<Type>asList(new Address(user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> toPowerOfThreeHalves(BigInteger x) {
        final Function function = new Function(FUNC_TOPOWEROFTHREEHALVES, 
                Arrays.<Type>asList(new Uint256(x)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getDividendTokenSupply() {
        final Function function = new Function(FUNC_GETDIVIDENDTOKENSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<Skcoin_sol_Skcoin> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _platformAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_platformAddress)));
        return deployRemoteCall(Skcoin_sol_Skcoin.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<Skcoin_sol_Skcoin> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _platformAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_platformAddress)));
        return deployRemoteCall(Skcoin_sol_Skcoin.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<OnTokenPurchaseEventResponse> getOnTokenPurchaseEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ONTOKENPURCHASE_EVENT, transactionReceipt);
        ArrayList<OnTokenPurchaseEventResponse> responses = new ArrayList<OnTokenPurchaseEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OnTokenPurchaseEventResponse typedResponse = new OnTokenPurchaseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.incomingEthereum = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokensMinted = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenPrice = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.divChoice = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.referrer = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OnTokenPurchaseEventResponse> onTokenPurchaseEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OnTokenPurchaseEventResponse>() {
            @Override
            public OnTokenPurchaseEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ONTOKENPURCHASE_EVENT, log);
                OnTokenPurchaseEventResponse typedResponse = new OnTokenPurchaseEventResponse();
                typedResponse.log = log;
                typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.incomingEthereum = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.tokensMinted = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenPrice = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.divChoice = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.referrer = (String) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<OnTokenPurchaseEventResponse> onTokenPurchaseEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ONTOKENPURCHASE_EVENT));
        return onTokenPurchaseEventObservable(filter);
    }

    public List<OnTokenSellEventResponse> getOnTokenSellEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ONTOKENSELL_EVENT, transactionReceipt);
        ArrayList<OnTokenSellEventResponse> responses = new ArrayList<OnTokenSellEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OnTokenSellEventResponse typedResponse = new OnTokenSellEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ethereumEarned = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokensBurned = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenPrice = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.divRate = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OnTokenSellEventResponse> onTokenSellEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OnTokenSellEventResponse>() {
            @Override
            public OnTokenSellEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ONTOKENSELL_EVENT, log);
                OnTokenSellEventResponse typedResponse = new OnTokenSellEventResponse();
                typedResponse.log = log;
                typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ethereumEarned = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.tokensBurned = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenPrice = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.divRate = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<OnTokenSellEventResponse> onTokenSellEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ONTOKENSELL_EVENT));
        return onTokenSellEventObservable(filter);
    }

    public List<DivideEventResponse> getDivideEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DIVIDE_EVENT, transactionReceipt);
        ArrayList<DivideEventResponse> responses = new ArrayList<DivideEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DivideEventResponse typedResponse = new DivideEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.totalToken = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DivideEventResponse> divideEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, DivideEventResponse>() {
            @Override
            public DivideEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DIVIDE_EVENT, log);
                DivideEventResponse typedResponse = new DivideEventResponse();
                typedResponse.log = log;
                typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.totalToken = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<DivideEventResponse> divideEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DIVIDE_EVENT));
        return divideEventObservable(filter);
    }

    public List<UserDividendRateEventResponse> getUserDividendRateEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(USERDIVIDENDRATE_EVENT, transactionReceipt);
        ArrayList<UserDividendRateEventResponse> responses = new ArrayList<UserDividendRateEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UserDividendRateEventResponse typedResponse = new UserDividendRateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.divRate = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UserDividendRateEventResponse> userDividendRateEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, UserDividendRateEventResponse>() {
            @Override
            public UserDividendRateEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(USERDIVIDENDRATE_EVENT, log);
                UserDividendRateEventResponse typedResponse = new UserDividendRateEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.divRate = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<UserDividendRateEventResponse> userDividendRateEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USERDIVIDENDRATE_EVENT));
        return userDividendRateEventObservable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventObservable(filter);
    }

    public List<BoughtAssetsDetailEventResponse> getBoughtAssetsDetailEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(BOUGHTASSETSDETAIL_EVENT, transactionReceipt);
        ArrayList<BoughtAssetsDetailEventResponse> responses = new ArrayList<BoughtAssetsDetailEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            BoughtAssetsDetailEventResponse typedResponse = new BoughtAssetsDetailEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.buyer = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.referrer = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.referrerToken = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenHolder = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.toPlatformToken = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<BoughtAssetsDetailEventResponse> boughtAssetsDetailEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, BoughtAssetsDetailEventResponse>() {
            @Override
            public BoughtAssetsDetailEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(BOUGHTASSETSDETAIL_EVENT, log);
                BoughtAssetsDetailEventResponse typedResponse = new BoughtAssetsDetailEventResponse();
                typedResponse.log = log;
                typedResponse.buyer = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.referrer = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.referrerToken = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenHolder = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.toPlatformToken = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<BoughtAssetsDetailEventResponse> boughtAssetsDetailEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BOUGHTASSETSDETAIL_EVENT));
        return boughtAssetsDetailEventObservable(filter);
    }

    public List<SellAssetsDetailEventResponse> getSellAssetsDetailEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SELLASSETSDETAIL_EVENT, transactionReceipt);
        ArrayList<SellAssetsDetailEventResponse> responses = new ArrayList<SellAssetsDetailEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SellAssetsDetailEventResponse typedResponse = new SellAssetsDetailEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.seller = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tokenHolder = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.toPlatformToken = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SellAssetsDetailEventResponse> sellAssetsDetailEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, SellAssetsDetailEventResponse>() {
            @Override
            public SellAssetsDetailEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SELLASSETSDETAIL_EVENT, log);
                SellAssetsDetailEventResponse typedResponse = new SellAssetsDetailEventResponse();
                typedResponse.log = log;
                typedResponse.seller = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.tokenHolder = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.toPlatformToken = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<SellAssetsDetailEventResponse> sellAssetsDetailEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SELLASSETSDETAIL_EVENT));
        return sellAssetsDetailEventObservable(filter);
    }

    public List<PauseEventResponse> getPauseEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSE_EVENT, transactionReceipt);
        ArrayList<PauseEventResponse> responses = new ArrayList<PauseEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            PauseEventResponse typedResponse = new PauseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.adminAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<PauseEventResponse> pauseEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, PauseEventResponse>() {
            @Override
            public PauseEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSE_EVENT, log);
                PauseEventResponse typedResponse = new PauseEventResponse();
                typedResponse.log = log;
                typedResponse.adminAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<PauseEventResponse> pauseEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSE_EVENT));
        return pauseEventObservable(filter);
    }

    public List<UnpauseEventResponse> getUnpauseEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UNPAUSE_EVENT, transactionReceipt);
        ArrayList<UnpauseEventResponse> responses = new ArrayList<UnpauseEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UnpauseEventResponse typedResponse = new UnpauseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.adminAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UnpauseEventResponse> unpauseEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, UnpauseEventResponse>() {
            @Override
            public UnpauseEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UNPAUSE_EVENT, log);
                UnpauseEventResponse typedResponse = new UnpauseEventResponse();
                typedResponse.log = log;
                typedResponse.adminAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<UnpauseEventResponse> unpauseEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSE_EVENT));
        return unpauseEventObservable(filter);
    }

    public static Skcoin_sol_Skcoin load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Skcoin_sol_Skcoin(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Skcoin_sol_Skcoin load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Skcoin_sol_Skcoin(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class OnTokenPurchaseEventResponse {
        public Log log;

        public String customerAddress;

        public BigInteger incomingEthereum;

        public BigInteger tokensMinted;

        public BigInteger tokenPrice;

        public BigInteger divChoice;

        public String referrer;
    }

    public static class OnTokenSellEventResponse {
        public Log log;

        public String customerAddress;

        public BigInteger ethereumEarned;

        public BigInteger tokensBurned;

        public BigInteger tokenPrice;

        public BigInteger divRate;
    }

    public static class DivideEventResponse {
        public Log log;

        public String customerAddress;

        public BigInteger totalToken;
    }

    public static class UserDividendRateEventResponse {
        public Log log;

        public String user;

        public BigInteger divRate;
    }

    public static class TransferEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger tokens;
    }

    public static class BoughtAssetsDetailEventResponse {
        public Log log;

        public String buyer;

        public String referrer;

        public BigInteger referrerToken;

        public BigInteger tokenHolder;

        public BigInteger toPlatformToken;
    }

    public static class SellAssetsDetailEventResponse {
        public Log log;

        public String seller;

        public BigInteger tokenHolder;

        public BigInteger toPlatformToken;
    }

    public static class PauseEventResponse {
        public Log log;

        public String adminAddress;
    }

    public static class UnpauseEventResponse {
        public Log log;

        public String adminAddress;
    }
}
