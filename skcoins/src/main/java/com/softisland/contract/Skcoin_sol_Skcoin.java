package com.softisland.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class Skcoin_sol_Skcoin extends Contract {
    private static final String BINARY = "68056bc75e2d6310000060005560c0604052600660808190527f536b636f696e000000000000000000000000000000000000000000000000000060a09081526200004d916001919062000212565b506040805180820190915260038082527f534b5900000000000000000000000000000000000000000000000000000000006020909201918252620000949160029162000212565b50600060038190556014556016805461ffff19169055348015620000b757600080fd5b50604051602080620031dc833981016040908152905160068054600160a060020a031916600160a060020a0390921691909117905533600090815260056020908152918120805460ff199081166001908117909255600c9093527f5d6016397a73f5e079297ac5a36fef17b4d9c3831618e63ab105738020ddd72080548416821790557f2cd9ebf6ff19cdd7ffcc447d7c7d47b5991f5c7392a04512134e765802361fa680548416821790557f9e6c92d7be355807bd948171438a5e65aaf9e4c36f1405c1b9ca25d27c4ea3a080548416821790557f55664edbebd57273ba1f6d1c017cd920bbceea562d5502a6837280a660edef9580548416821790557ff47a2f56f0955e689cdfc6405887e0f3452b74fbb1c4f20652e6c211a96d68b3805484168217905560329091527f74c83704300c65b1de76b9ee7537f3f330650a1d59eb262898de510c0c350be28054909216179055620002b7565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025557805160ff191683800117855562000285565b8280016001018555821562000285579182015b828111156200028557825182559160200191906001019062000268565b506200029392915062000297565b5090565b620002b491905b808211156200029357600081556001016200029e565b90565b612f1580620002c76000396000f3006080604052600436106102b35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166303d499ef811461030757806306fdde031461032e578063095ea7b3146103b857806310d0ffdd146103f057806318160ddd146104085780631b1686b61461041d578063214dda8414610432578063226093731461044757806323b872dd1461045f5780632542536314610489578063269a7c3f146104ba57806327dffba6146104d65780632a9121c7146104eb5780632dec59ef14610503578063313ce567146105205780633c7d6f301461054b5780634b75033414610560578063513920411461057557806354c993671461059657806356d399e8146105ba57806359c9e118146105cf5780635c658165146105ef5780635ccb5460146106165780636135e0841461062b578063677342ce1461064057806368955fb1146106585780636a3a21191461066d5780636b2f46321461067557806370a082311461068a57806376be1585146106ab5780637b89eef2146106cc5780638328b610146106e157806387c95058146106f957806395d89b411461071f578063965447d914610734578063a3a06c541461074c578063a5f2a15214610761578063a9059cbb1461078b578063aaaa950d146107af578063b53b8d7a146107c9578063b607068c146107de578063b84c8246146107f3578063ba93d5e51461084c578063bcaa218e1461086d578063bf3b397b14610882578063c47f00271461089a578063c4dbf622146108f3578063c80a3aa61461090b578063cc03c34214610970578063ccb5336514610991578063d161b56a146109a6578063e4849b32146109bb578063e9fad8ee146109d3578063f088d547146109e8578063f42c56c2146109fc578063f8ead7cf14610a14578063fdc89f7314610a35578063ffcb1edb14610a4d575b601654600090610100900460ff1615156102cc57600080fd5b50336000818152600d602052604090205460ff16156102f6576102f0346000610a62565b50610304565b61030260006014610bf7565b505b50005b34801561031357600080fd5b5061031c610cf5565b60408051918252519081900360200190f35b34801561033a57600080fd5b50610343610cfc565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561037d578181015183820152602001610365565b50505050905090810190601f1680156103aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103c457600080fd5b506103dc600160a060020a0360043516602435610d89565b604080519115158252519081900360200190f35b3480156103fc57600080fd5b5061031c600435610df6565b34801561041457600080fd5b5061031c610e59565b34801561042957600080fd5b5061031c610e5f565b34801561043e57600080fd5b506103dc610e65565b34801561045357600080fd5b5061031c600435610e73565b34801561046b57600080fd5b506103dc600160a060020a0360043581169060243516604435610ede565b34801561049557600080fd5b5061049e610f5e565b60408051600160a060020a039092168252519081900360200190f35b6104d4600160a060020a0360043581169060243516610f6d565b005b3480156104e257600080fd5b506104d4610f7d565b3480156104f757600080fd5b5061031c600435610fad565b61031c600435600160a060020a036024351660ff604435166111f8565b34801561052c57600080fd5b50610535611348565b6040805160ff9092168252519081900360200190f35b34801561055757600080fd5b506104d461134d565b34801561056c57600080fd5b5061031c611380565b34801561058157600080fd5b5061031c600160a060020a0360043516611423565b3480156105a257600080fd5b506103dc600160a060020a036004351660243561143e565b3480156105c657600080fd5b5061031c6115e1565b6104d4600160a060020a036004358116906024351660ff604435166115e7565b3480156105fb57600080fd5b5061031c600160a060020a0360043581169060243516611688565b34801561062257600080fd5b5061031c6116a5565b34801561063757600080fd5b5061031c6116ab565b34801561064c57600080fd5b5061031c6004356116be565b34801561066457600080fd5b506103dc6116f9565b6104d4611702565b34801561068157600080fd5b5061031c611723565b34801561069657600080fd5b5061031c600160a060020a0360043516611728565b3480156106b757600080fd5b506103dc600160a060020a0360043516611743565b3480156106d857600080fd5b5061031c611758565b3480156106ed57600080fd5b506104d4600435611768565b34801561070557600080fd5b506104d4600160a060020a036004351660243515156117a2565b34801561072b57600080fd5b506103436117ec565b34801561074057600080fd5b5061031c600435611844565b34801561075857600080fd5b506104d4611858565b34801561076d57600080fd5b506104d4600160a060020a0360043581169060243516604435611883565b34801561079757600080fd5b506103dc600160a060020a0360043516602435611947565b61031c600160a060020a036004351660ff60243516610bf7565b3480156107d557600080fd5b506104d461199f565b3480156107ea57600080fd5b50610535611cf9565b3480156107ff57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104d4943694929360249392840191908190840183828082843750949750611d3a9650505050505050565b34801561085857600080fd5b506104d4600160a060020a0360043516611d6b565b34801561087957600080fd5b5061031c611db9565b34801561088e57600080fd5b5061031c600435611dc5565b3480156108a657600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104d4943694929360249392840191908190840183828082843750949750611f759650505050505050565b3480156108ff57600080fd5b5061031c600435611fa6565b34801561091757600080fd5b5061092061202b565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561095c578181015183820152602001610944565b505050509050019250505060405180910390f35b34801561097c57600080fd5b506104d4600160a060020a036004351661208d565b34801561099d57600080fd5b506104d4612114565b3480156109b257600080fd5b5061031c612153565b3480156109c757600080fd5b506104d4600435612159565b3480156109df57600080fd5b506104d4612373565b61031c600160a060020a03600435166123b1565b348015610a0857600080fd5b5061031c6004356123fc565b348015610a2057600080fd5b5061031c600160a060020a0360043516612436565b348015610a4157600080fd5b5061031c600435612477565b348015610a5957600080fd5b5061031c612485565b600080600080600080655af3107a400088101580610a8a5750600754600160a060020a031633145b1515610b06576040805160e560020a62461bcd02815260206004820152602f60248201527f547269656420746f206275792062656c6f7720746865206d696e20657468206260448201527f7579696e207468726573686f6c642e0000000000000000000000000000000000606482015290519081900360840190fd5b60165460ff1615610b2157610b1b888861248b565b50610bec565b336000908152600e602052604090205460ff169250610b3f83611fa6565b9150879050610b666002610b5a83606463ffffffff61271616565b9063ffffffff61272d16565b9350610b78818563ffffffff61275f16565b9050610b8381610fad565b9450610b8f8888612771565b50604080518981526020810187905280820184905260ff85166060820152600160a060020a0389166080820152905133917ffe3ac80ec95b3bbcf01b0b389cc27c089970282a6a8a95ac4fd7936603dc22d7919081900360a00190a25b505050505092915050565b601654600090819060ff1680610c145750601654610100900460ff165b1515610c1f57600080fd5b60165460ff1615610c5757503a640ba43b74008111801590610c4c5750680d8d726b7177a8000060125411155b1515610c5757600080fd5b60ff8084166000908152600c6020526040902054161515610c7757600080fd5b336000818152600d60209081526040808320805460ff19908116600117909155600e835292819020805460ff891694168417905580519384529083019190915280517fc95fc9f67beb97905ada724494d1acfcaa30a3c96b432a0eac1824899f9f97c29281900390910190a1610ced3485610a62565b505092915050565b6012545b90565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610d815780601f10610d5657610100808354040283529160200191610d81565b820191906000526020600020905b815481529060010190602001808311610d6457829003601f168201915b505050505081565b336000818152600460209081526040808320600160a060020a03871680855290835281842086905581518681529151939493909284927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a3600191505b5092915050565b336000908152600e6020526040812054819081908190610e3390606490610e2790889060ff1663ffffffff61272d16565b9063ffffffff61271616565b9250610e45858463ffffffff61275f16565b9150610e5082610fad565b95945050505050565b60035490565b60135481565b601654610100900460ff1681565b60008060008060006003548611151515610e8c57600080fd5b610e9586611dc5565b9350610ea033612436565b9250610ec268010000000000000000610e27606481888863ffffffff61272d16565b9150610ed4848363ffffffff61275f16565b9695505050505050565b6000836402540be4008310801590610f0e5750600160a060020a0381166000908152600860205260409020548311155b8015610f3d5750600160a060020a03811660009081526004602090815260408083203384529091529020548311155b1515610f4857600080fd5b610f53858585612b41565b506001949350505050565b600754600160a060020a031681565b610f79828260146115e7565b5050565b3360008181526005602052604090205460ff161515610f9b57600080fd5b506016805461ffff1916610100179055565b6000808080808080808080655af3107a40008b1161103b576040805160e560020a62461bcd02815260206004820152602860248201527f547269656420746f2062757920746f6b656e73207769746820746f6f206c697460448201527f746c65206574682e000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60165460ff161561106e5761105d8b660251e66909d00063ffffffff61271616565b670de0b6b3a76400000299506111ea565b60125460135460009a508a995010611088578a97506110fe565b6012546013541080156110a157506012548b6013540111155b156110ae578a98506110fe565b6012546013541080156110c657506012548b60135401115b156110f9576013546012546110e09163ffffffff61275f16565b98506110f28b8a63ffffffff61275f16565b97506110fe565b600080fd5b8888018b1461110957fe5b60009650869550881561113c57611139660251e66909d000610e278b670de0b6b3a764000063ffffffff61272d16565b96505b87156111d857886111716003610e276002610b5a61116c61258f620f42400260035461271690919063ffffffff16565b612477565b019450878501935061119d61258f610b5a6111986002610e278a600363ffffffff61272d16565b611844565b92506111be61258f610b5a6111986002610e2789600363ffffffff61272d16565b91506111d0828463ffffffff61275f16565b620f42400295505b50858501600081116111e657fe5b8099505b505050505050505050919050565b33600081815260086020908152604080832054600d9092528220549192918390819060ff16801561122a575060ff8616155b1561123f576112393488610a62565b5061124b565b6112498787610bf7565b505b33600090815260086020526040902054611265908461275f565b600754604080517f746f6b656e546f506f696e744279536b63436f6e74726163742875696e74323581527f362c20616464726573732c2075696e74323536290000000000000000000000006020820152815190819003603401812063ffffffff7c0100000000000000000000000000000000000000000000000000000000918290049081169091028252600482018d9052336024830152604482018590529151939550600160a060020a03909216929091606480820192600092909190829003018183875af192505050905080151561133d57600080fd5b509695505050505050565b601281565b601754621275000142118015611364575060175415155b151561136f57600080fd5b6016805461ffff1916610100179055565b60165460009081908190819060ff168061139d5750601254601354105b156113b157660251e66909d00092506113e0565b6113c166038d7ea4c68000610fad565b9150816d314dc6448d9338c15b0a000000008115156113dc57fe5b0492505b61141b61140e68010000000000000000610e276064610e2761140133612436565b899063ffffffff61272d16565b849063ffffffff61275f16565b949350505050565b600160a060020a03166000908152600a602052604090205490565b6007546000908190600160a060020a0316331461145a57600080fd5b600160a060020a03841660009081526008602052604090205483111561147f57600080fd5b61149d6064610e2761149087612436565b869063ffffffff61272d16565b600160a060020a0385166000908152600860205260409020549091506114c9908463ffffffff61275f16565b600160a060020a038086166000908152600860205260408082209390935560075490911681522054611501908463ffffffff612d9a16565b600754600160a060020a039081166000908152600860209081526040808320949094559187168152600a9091522054611540908263ffffffff61275f16565b600160a060020a038086166000908152600a60205260408082209390935560075490911681522054611578908263ffffffff612d9a16565b60078054600160a060020a039081166000908152600a60209081526040918290209490945591548251878152925190821693918816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92908290030190a35060019392505050565b60005481565b6000806000601660019054906101000a900460ff16151561160757600080fd5b33600081815260086020908152604080832054600d90925290912054919450925060ff168015611638575060ff8416155b1561164d576116473487610a62565b50611659565b6116578685610bf7565b505b33600090815260086020526040902054611673908361275f565b9050611680338683611883565b505050505050565b600460209081526000928352604080842090915290825290205481565b60125481565b6000336116b781611423565b91505b5090565b80600260018201045b818110156116f35780915060028182858115156116e057fe5b04018115156116eb57fe5b0490506116c7565b50919050565b60165460ff1681565b3360008181526005602052604090205460ff16151561172057600080fd5b50565b303190565b600160a060020a031660009081526008602052604090205490565b60056020526000908152604090205460ff1681565b600061176333612436565b905090565b3360008181526005602052604090205460ff16151561178657600080fd5b68056bc75e2d6310000082101561179c57600080fd5b50600055565b3360008181526005602052604090205460ff1615156117c057600080fd5b50600160a060020a03919091166000908152600560205260409020805460ff1916911515919091179055565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610d815780601f10610d5657610100808354040283529160200191610d81565b60006118526002830a6123fc565b92915050565b3360008181526005602052604090205460ff16151561187657600080fd5b506016805460ff19169055565b600160a060020a03831633146118ff576402540be40081101580156118c05750600160a060020a0383166000908152600860205260409020548111155b80156118ef5750600160a060020a03831660009081526004602090815260408083203384529091529020548111155b15156118fa57600080fd5b611937565b6402540be400811015801561192c5750600160a060020a0383166000908152600860205260409020548111155b151561193757600080fd5b611942838383612b41565b505050565b600080611952611db9565b1161195c57600080fd5b6402540be40082101580156119805750336000908152600860205260409020548211155b151561198b57600080fd5b611996338484612b41565b50600192915050565b336000818152600560205260408120549091829182918291829182918291829160ff1615156119cd57600080fd5b601654610100900460ff1615156119e357600080fd5b6015549850600096505b601054871015611c9f576010805488908110611a0557fe5b6000918252602080832090910154600160a060020a031680835260089091526040822054909750909550851015611b3357601454600160a060020a0387166000908152600a6020526040902054601554611a6a9291610e27919063ffffffff61272d16565b601454600160a060020a0388166000908152600a6020526040902054919650611a9e91610e2790889063ffffffff61272d16565b601454909450611ab4908563ffffffff612d9a16565b601455600160a060020a038616600090815260086020526040902054611ae0908663ffffffff612d9a16565b600160a060020a038716600090815260086020908152604080832093909355600a90522054611b15908563ffffffff612d9a16565b600160a060020a0387166000908152600a6020526040902055968401965b600160a060020a038616600090815260096020526040902054925084151580611b5c5750600083115b15611c3d57601454600160a060020a0387166000908152600a6020526040902054611b939190610e2790869063ffffffff61272d16565b600160a060020a038716600090815260096020526040812055601454909250611bc2908363ffffffff612d9a16565b601455600160a060020a038616600090815260086020526040902054611bee908463ffffffff612d9a16565b600160a060020a038716600090815260086020908152604080832093909355600a90522054611c23908363ffffffff612d9a16565b600160a060020a0387166000908152600a60205260409020555b84151580611c4b5750600083115b15611c945760408051848152602081018790528151600160a060020a038916927ff23c0d9317f6be471607052a1b5b49e380a207ec651da595ba9f882470f72835928290030190a25b6001909601956119ed565b6015548814611caa57fe5b6000601555601054604080518b81526020810192909252805133927f6925a594cdedf404fb393921c171ac5a20037af918e28f8abc05c58334c2090c92908290030190a2505050505050505050565b336000818152600d602052604081205490919060ff161515611d1a57600080fd5b600160a060020a03166000908152600e602052604090205460ff16919050565b3360008181526005602052604090205460ff161515611d5857600080fd5b8151611942906002906020850190612e35565b3360008181526005602052604090205460ff161515611d8957600080fd5b506007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000336116b781611728565b600080808080808080655af3107a4000891015611e2c576040805160e560020a62461bcd02815260206004820152601d60248201527f547269656420746f2073656c6c20746f6f2066657720746f6b656e732e000000604482015290519081900360640190fd5b6011546003546000985088975011611e4657889650611eb3565b601154600354118015611e5f5750601154896003540310155b15611e6c57889550611eb3565b601154600354118015611e8457506011548960035403105b156110f957601154600354611e9e9163ffffffff61275f16565b9550611eb0898763ffffffff61275f16565b96505b8587018914611ebe57fe5b8615611eea57611ee7670de0b6b3a7640000610e2789660251e66909d00063ffffffff61272d16565b94505b8515611f5b57611f196003610e276002610b5a61116c61258f620f42400260035461271690919063ffffffff16565b9250611f466003610e276002610b5a61116c61258f620f4240028c6003540361271690919063ffffffff16565b9150611f58838363ffffffff61275f16565b93505b5082840160008111611f6957fe5b98975050505050505050565b3360008181526005602052604090205460ff161515611f9357600080fd5b8151611942906001906020850190612e35565b60165460009081908190819060ff1680611fc35750601254601354105b15611fd757660251e66909d0009250612006565b611fe766038d7ea4c68000610fad565b9150816d314dc6448d9338c15b0a0000000081151561200257fe5b0492505b610e508361201f6064610e27838a63ffffffff61272d16565b9063ffffffff612d9a16565b6060601080548060200260200160405190810160405280929190818152602001828054801561208357602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612065575b5050505050905090565b3360008181526005602052604090205460ff1615156120ab57600080fd5b5060068054600160a060020a0392831673ffffffffffffffffffffffffffffffffffffffff199091161780825582166000908152600d60209081526040808320805460ff1990811660011790915593549094168252600e90529190912080549091166032179055565b3360008181526005602052604090205460ff16151561213257600080fd5b6017541561213f57600080fd5b506016805460ff1916600117905542601755565b60115481565b600080600080600080600061216c611db9565b1161217657600080fd5b60165460ff161561218657600080fd5b601654610100900460ff16151561219c57600080fd5b336000908152600860205260409020548711156121b857600080fd5b8695506121c3611380565b94506121ce33612436565b93506121e56064610e27888763ffffffff61272d16565b9586900395925068020000000000000000841080159061220e5750683200000000000000008411155b151561221957600080fd5b61223668010000000000000000610e27888763ffffffff61272d16565b915061224186611dc5565b9050601354811115612257576000601355612261565b6013805482900390555b600354612274908763ffffffff61275f16565b60035560145461228a908363ffffffff61275f16565b601455336000908152600860205260409020546122ad908763ffffffff61275f16565b33600090815260086020908152604080832093909355600a905220546122d9908363ffffffff61275f16565b336000818152600a60205260408082209390935560158054870190559151909183156108fc02918491818181858888f1935050505015801561231f573d6000803e3d6000fd5b50604080518281526020810189905280820187905260608101869052905133917f9e7640c8084933448e21479747bae0ff2b839fc1969425ea177bd30df8b324c2919081900360800190a250505050505050565b6016546000908190610100900460ff16151561238e57600080fd5b50503360008181526008602052604081205490811115610f7957610f7981612159565b6016546000908190610100900460ff1615156123cc57600080fd5b50336000818152600d602052604090205460ff1615156123eb57600080fd5b6123f53484610a62565b5050919050565b80600360018201045b818110156116f3578091506003816002028283028581151561242357fe5b040181151561242e57fe5b049050612405565b600160a060020a038116600090815260086020908152604080832054600a90925282205461185291680100000000000000009091029063ffffffff61271616565b60006118526003830a6116be565b60145490565b6000806000806000655af3107a4000871015806124b25750600754600160a060020a031633145b151561252e576040805160e560020a62461bcd02815260206004820152602f60248201527f547269656420746f206275792062656c6f7720746865206d696e20657468206260448201527f7579696e207468726573686f6c642e0000000000000000000000000000000000606482015290519081900360840190fd5b60165460ff16151561253f57600080fd5b8691506125586002610b5a84606463ffffffff61271616565b935061256a828563ffffffff61275f16565b915061257582610fad565b60035490935061258b908463ffffffff612d9a16565b6003556013546125a1908363ffffffff612d9a16565b601355601280548301908190556011805485019055680d8d726b7177a8000010156125cb57600080fd5b3233146125d757600080fd5b336000908152600b602052604090208054830190819055670de0b6b3a7640000101561260257600080fd5b680d8d726b7177a800006012541415612620576016805460ff191690555b33600090815260086020526040902054612640908463ffffffff612d9a16565b3360008181526008602052604090209190915561265c90612da9565b831561269e57600654604051600160a060020a039091169085156108fc029086906000818181858888f1935050505015801561269c573d6000803e3d6000fd5b505b5082810186900380156126ad57fe5b6040805188815260208101859052660251e66909d0008183015260006060820152600160a060020a0388166080820152905133917ffe3ac80ec95b3bbcf01b0b389cc27c089970282a6a8a95ac4fd7936603dc22d7919081900360a00190a25050505092915050565b600080828481151561272457fe5b04949350505050565b6000808315156127405760009150610def565b5082820282848281151561275057fe5b041461275857fe5b9392505050565b60008282111561276b57fe5b50900390565b6000806000806000806000806000806000601660019054906101000a900460ff16151561279d57600080fd5b8c91506127b66002610b5a84606463ffffffff61271616565b97506127c8828963ffffffff61275f16565b91506127d382610fad565b336000908152600e602052604090205490945061280190606490610e2790859060ff1663ffffffff61272d16565b9550612813828763ffffffff61275f16565b915061281e82610fad565b9250612830848463ffffffff61275f16565b600354909550612846908563ffffffff612d9a16565b60035560135461285c908363ffffffff612d9a16565b6013819055612871908763ffffffff612d9a16565b601355600160a060020a038c16158015906128955750600160a060020a038c163314155b80156128ba575060008054600160a060020a038e168252600860205260409091205410155b1561295c576128d56064610e2787601e63ffffffff61272d16565b600160a060020a038d16600090815260096020526040902054909a50612901908b63ffffffff612d9a16565b600160a060020a038d166000818152600960209081526040918290209390935580513381529283018d9052805191927faeecfcda1271d292db728294b8ae465871ec039d51404caf49a7eb0ade51770a929081900390910190a25b6129726064610e2787603c63ffffffff61272d16565b985061299489612988878d63ffffffff61275f16565b9063ffffffff61275f16565b6015549097506129aa908a63ffffffff612d9a16565b601555600654600160a060020a03166000908152600860205260409020546129d8908863ffffffff612d9a16565b600654600160a060020a03166000908152600860205260409020558715612a3557600654604051600160a060020a039091169089156108fc02908a906000818181858888f19350505050158015612a33573d6000803e3d6000fd5b505b33600090815260086020526040902054612a55908463ffffffff612d9a16565b33600090815260086020908152604080832093909355600e90522054612aa590612a8990859060ff1663ffffffff61272d16565b336000908152600a60205260409020549063ffffffff612d9a16565b336000818152600a6020526040902091909155612ac190612da9565b5086810185018c90038015612ad257fe5b50858901880182018390038015612ae557fe5b60408051600160a060020a038e168152602081018c90528082018b9052905133917fd39061ef94f4813669e9b8b94864fa0d292f4cf439f6549afd8c693ef51a7749919081900360600190a25050505050505050505092915050565b6000806000601660019054906101000a900460ff161515612b6157600080fd5b600160a060020a0385161515612b7657600080fd5b859250839150612ba268010000000000000000610e27612b9586612436565b859063ffffffff61272d16565b9050600160a060020a0383163314612bdf57600160a060020a03831660009081526004602090815260408083203384529091529020805485900390555b600160a060020a038316600090815260086020526040902054612c08908363ffffffff61275f16565b600160a060020a038085166000908152600860205260408082209390935590871681522054612c3d908363ffffffff612d9a16565b600160a060020a038087166000908152600860209081526040808320949094559186168152600a9091522054612c79908263ffffffff61275f16565b600160a060020a038085166000908152600a60205260408082209390935590871681522054612cae908263ffffffff612d9a16565b600160a060020a0386166000908152600a6020526040902055612cd083612da9565b612cd985612da9565b600160a060020a0385166000908152600d602052604090205460ff161515612d4757600160a060020a038086166000818152600d60209081526040808320805460ff199081166001179091559488168352600e909152808220549282529020805490921660ff919091161790555b84600160a060020a031683600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3505050505050565b60008282018381101561275857fe5b600160a060020a0381166000908152600f60205260409020541515611720576010805490612dda9060018301612eaf565b600160a060020a0382166000908152600f60205260409020819055601080548392908110612e0457fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612e7657805160ff1916838001178555612ea3565b82800160010185558215612ea3579182015b82811115612ea3578251825591602001919060010190612e88565b506116ba929150612ecf565b815481835581811115611942576000838152602090206119429181019083015b610cf991905b808211156116ba5760008155600101612ed55600a165627a7a723058209cf665a85e8bb252ff062c2c1e790901da61285895ee203176d1583ea0f06f600029";

    public static final String FUNC_TOTALETHEREUMICORECEIVED = "totalEthereumICOReceived";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_CALCULATETOKENSRECEIVED = "calculateTokensReceived";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_CURRENTETHINVESTED = "currentEthInvested";

    public static final String FUNC_REGULARPHASE = "regularPhase";

    public static final String FUNC_CALCULATEETHEREUMRECEIVED = "calculateEthereumReceived";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_BANKROLLADDRESS = "bankrollAddress";

    public static final String FUNC_BUYANDTRANSFER = "buyAndTransfer";

    public static final String FUNC_STARTREGULARPHASE = "startRegularPhase";

    public static final String FUNC_ETHEREUMTOTOKENS_ = "ethereumToTokens_";

    public static final String FUNC_ETHBUYGAMEPOINTS = "ethBuyGamePoints";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_PUBLICSTARTREGULARPHASE = "publicStartRegularPhase";

    public static final String FUNC_SELLPRICE = "sellPrice";

    public static final String FUNC_GETDIVIDENDTOKENBALANCEOF = "getDividendTokenBalanceOf";

    public static final String FUNC_REDEEMGAMEPOINTS = "redeemGamePoints";

    public static final String FUNC_STAKINGREQUIREMENT = "stakingRequirement";

    public static final String FUNC_ALLOWED = "allowed";

    public static final String FUNC_ETHINVESTEDDURINGICO = "ethInvestedDuringICO";

    public static final String FUNC_MYDIVIDENDTOKENS = "myDividendTokens";

    public static final String FUNC_SQRT = "sqrt";

    public static final String FUNC_ICOPHASE = "icoPhase";

    public static final String FUNC_INJECTETHER = "injectEther";

    public static final String FUNC_TOTALETHEREUMBALANCE = "totalEthereumBalance";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_ADMINISTRATORS = "administrators";

    public static final String FUNC_GETMYAVERAGEDIVIDENDRATE = "getMyAverageDividendRate";

    public static final String FUNC_SETSTAKINGREQUIREMENT = "setStakingRequirement";

    public static final String FUNC_SETADMINISTRATOR = "setAdministrator";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOPOWEROFTWOTHIRDS = "toPowerOfTwoThirds";

    public static final String FUNC_ENDICOPHASE = "endICOPhase";

    public static final String FUNC_TRANSFERTO = "transferTo";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_BUYANDSETDIVPERCENTAGE = "buyAndSetDivPercentage";

    public static final String FUNC_DIVIDE = "divide";

    public static final String FUNC_GETMYDIVIDENDRATE = "getMyDividendRate";

    public static final String FUNC_SETSYMBOL = "setSymbol";

    public static final String FUNC_SETBANKROLLADDRESS = "setBankrollAddress";

    public static final String FUNC_MYFRONTENDTOKENS = "myFrontEndTokens";

    public static final String FUNC_TOKENSTOETHEREUM_ = "tokensToEthereum_";

    public static final String FUNC_SETNAME = "setName";

    public static final String FUNC_BUYPRICE = "buyPrice";

    public static final String FUNC_ALLHOLDERS = "allHolders";

    public static final String FUNC_SETPLATFORMADDRESS = "setPlatformAddress";

    public static final String FUNC_STARTICOPHASE = "startICOPhase";

    public static final String FUNC_TOKENSMINTEDDURINGICO = "tokensMintedDuringICO";

    public static final String FUNC_SELL = "sell";

    public static final String FUNC_EXIT = "exit";

    public static final String FUNC_BUY = "buy";

    public static final String FUNC_CBRT = "cbrt";

    public static final String FUNC_GETUSERAVERAGEDIVIDENDRATE = "getUserAverageDividendRate";

    public static final String FUNC_TOPOWEROFTHREEHALVES = "toPowerOfThreeHalves";

    public static final String FUNC_GETDIVIDENDTOKENSUPPLY = "getDividendTokenSupply";

    public static final Event ONTOKENPURCHASE_EVENT = new Event("OnTokenPurchase", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ONTOKENSELL_EVENT = new Event("OnTokenSell", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DIVIDE_EVENT = new Event("Divide", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event USERDIVIDENDRATE_EVENT = new Event("UserDividendRate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ONREINVESTMENT_EVENT = new Event("OnReinvestment", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event REFERRAL_EVENT = new Event("Referral", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ASSETSDETAIL_EVENT = new Event("AssetsDetail", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DIVIDENDDETAIL_EVENT = new Event("DividendDetail", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    protected Skcoin_sol_Skcoin(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Skcoin_sol_Skcoin(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<BigInteger> totalEthereumICOReceived() {
        final Function function = new Function(FUNC_TOTALETHEREUMICORECEIVED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approve(String spender, BigInteger tokens) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(spender), 
                new org.web3j.abi.datatypes.generated.Uint256(tokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> calculateTokensReceived(BigInteger _ethereumToSpend) {
        final Function function = new Function(FUNC_CALCULATETOKENSRECEIVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ethereumToSpend)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> currentEthInvested() {
        final Function function = new Function(FUNC_CURRENTETHINVESTED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> regularPhase() {
        final Function function = new Function(FUNC_REGULARPHASE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> calculateEthereumReceived(BigInteger _tokensToSell) {
        final Function function = new Function(FUNC_CALCULATEETHEREUMRECEIVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokensToSell)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String _from, String _toAddress, BigInteger _amountOfTokens) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_toAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(_amountOfTokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> bankrollAddress() {
        final Function function = new Function(FUNC_BANKROLLADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> buyAndTransfer(String _referredBy, String target, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BUYANDTRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_referredBy), 
                new org.web3j.abi.datatypes.Address(target)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> startRegularPhase() {
        final Function function = new Function(
                FUNC_STARTREGULARPHASE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> ethereumToTokens_(BigInteger _ethereumAmount) {
        final Function function = new Function(FUNC_ETHEREUMTOTOKENS_, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_ethereumAmount)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> ethBuyGamePoints(BigInteger _id, String _referredBy, BigInteger divChoice, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_ETHBUYGAMEPOINTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id), 
                new org.web3j.abi.datatypes.Address(_referredBy), 
                new org.web3j.abi.datatypes.generated.Uint8(divChoice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> publicStartRegularPhase() {
        final Function function = new Function(
                FUNC_PUBLICSTARTREGULARPHASE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> sellPrice() {
        final Function function = new Function(FUNC_SELLPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getDividendTokenBalanceOf(String _customerAddress) {
        final Function function = new Function(FUNC_GETDIVIDENDTOKENBALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_customerAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> redeemGamePoints(String _caller, BigInteger _amountOfTokens) {
        final Function function = new Function(
                FUNC_REDEEMGAMEPOINTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_caller), 
                new org.web3j.abi.datatypes.generated.Uint256(_amountOfTokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> stakingRequirement() {
        final Function function = new Function(FUNC_STAKINGREQUIREMENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> buyAndTransfer(String _referredBy, String target, BigInteger divChoice, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BUYANDTRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_referredBy), 
                new org.web3j.abi.datatypes.Address(target), 
                new org.web3j.abi.datatypes.generated.Uint8(divChoice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> allowed(String param0, String param1) {
        final Function function = new Function(FUNC_ALLOWED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.Address(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> ethInvestedDuringICO() {
        final Function function = new Function(FUNC_ETHINVESTEDDURINGICO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> myDividendTokens() {
        final Function function = new Function(FUNC_MYDIVIDENDTOKENS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> sqrt(BigInteger x) {
        final Function function = new Function(FUNC_SQRT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> icoPhase() {
        final Function function = new Function(FUNC_ICOPHASE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> injectEther(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_INJECTETHER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> totalEthereumBalance() {
        final Function function = new Function(FUNC_TOTALETHEREUMBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> balanceOf(String _customerAddress) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_customerAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> administrators(String param0) {
        final Function function = new Function(FUNC_ADMINISTRATORS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> getMyAverageDividendRate() {
        final Function function = new Function(FUNC_GETMYAVERAGEDIVIDENDRATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setStakingRequirement(BigInteger _amountOfTokens) {
        final Function function = new Function(
                FUNC_SETSTAKINGREQUIREMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amountOfTokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setAdministrator(String _newAdmin, Boolean _status) {
        final Function function = new Function(
                FUNC_SETADMINISTRATOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newAdmin), 
                new org.web3j.abi.datatypes.Bool(_status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> toPowerOfTwoThirds(BigInteger x) {
        final Function function = new Function(FUNC_TOPOWEROFTWOTHIRDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> endICOPhase() {
        final Function function = new Function(
                FUNC_ENDICOPHASE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferTo(String _from, String _to, BigInteger _amountOfTokens) {
        final Function function = new Function(
                FUNC_TRANSFERTO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_amountOfTokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transfer(String _toAddress, BigInteger _amountOfTokens) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_toAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(_amountOfTokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> buyAndSetDivPercentage(String _referredBy, BigInteger _divChoice, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BUYANDSETDIVPERCENTAGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_referredBy), 
                new org.web3j.abi.datatypes.generated.Uint8(_divChoice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> divide() {
        final Function function = new Function(
                FUNC_DIVIDE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getMyDividendRate() {
        final Function function = new Function(FUNC_GETMYDIVIDENDRATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setSymbol(String _symbol) {
        final Function function = new Function(
                FUNC_SETSYMBOL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_symbol)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setBankrollAddress(String _bankrollAddress) {
        final Function function = new Function(
                FUNC_SETBANKROLLADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_bankrollAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> myFrontEndTokens() {
        final Function function = new Function(FUNC_MYFRONTENDTOKENS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> tokensToEthereum_(BigInteger _tokens) {
        final Function function = new Function(FUNC_TOKENSTOETHEREUM_, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokens)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setName(String _name) {
        final Function function = new Function(
                FUNC_SETNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> buyPrice(BigInteger dividendRate) {
        final Function function = new Function(FUNC_BUYPRICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(dividendRate)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<List> allHolders() {
        final Function function = new Function(FUNC_ALLHOLDERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setPlatformAddress(String _platformAddress) {
        final Function function = new Function(
                FUNC_SETPLATFORMADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_platformAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> startICOPhase() {
        final Function function = new Function(
                FUNC_STARTICOPHASE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> tokensMintedDuringICO() {
        final Function function = new Function(FUNC_TOKENSMINTEDDURINGICO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> sell(BigInteger _amountOfTokens) {
        final Function function = new Function(
                FUNC_SELL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amountOfTokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> exit() {
        final Function function = new Function(
                FUNC_EXIT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> buy(String _referredBy, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BUY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_referredBy)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> cbrt(BigInteger x) {
        final Function function = new Function(FUNC_CBRT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getUserAverageDividendRate(String user) {
        final Function function = new Function(FUNC_GETUSERAVERAGEDIVIDENDRATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> toPowerOfThreeHalves(BigInteger x) {
        final Function function = new Function(FUNC_TOPOWEROFTHREEHALVES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getDividendTokenSupply() {
        final Function function = new Function(FUNC_GETDIVIDENDTOKENSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<Skcoin_sol_Skcoin> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _platformAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_platformAddress)));
        return deployRemoteCall(Skcoin_sol_Skcoin.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<Skcoin_sol_Skcoin> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _platformAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_platformAddress)));
        return deployRemoteCall(Skcoin_sol_Skcoin.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<OnTokenPurchaseEventResponse> getOnTokenPurchaseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ONTOKENPURCHASE_EVENT, transactionReceipt);
        ArrayList<OnTokenPurchaseEventResponse> responses = new ArrayList<OnTokenPurchaseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OnTokenPurchaseEventResponse typedResponse = new OnTokenPurchaseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.incomingEthereum = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokensMinted = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenPrice = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.divChoice = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.referrer = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OnTokenPurchaseEventResponse> onTokenPurchaseEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OnTokenPurchaseEventResponse>() {
            @Override
            public OnTokenPurchaseEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ONTOKENPURCHASE_EVENT, log);
                OnTokenPurchaseEventResponse typedResponse = new OnTokenPurchaseEventResponse();
                typedResponse.log = log;
                typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.incomingEthereum = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.tokensMinted = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenPrice = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.divChoice = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.referrer = (String) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<OnTokenPurchaseEventResponse> onTokenPurchaseEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ONTOKENPURCHASE_EVENT));
        return onTokenPurchaseEventObservable(filter);
    }

    public List<OnTokenSellEventResponse> getOnTokenSellEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ONTOKENSELL_EVENT, transactionReceipt);
        ArrayList<OnTokenSellEventResponse> responses = new ArrayList<OnTokenSellEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OnTokenSellEventResponse typedResponse = new OnTokenSellEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ethereumEarned = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokensBurned = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenPrice = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.divRate = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OnTokenSellEventResponse> onTokenSellEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OnTokenSellEventResponse>() {
            @Override
            public OnTokenSellEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ONTOKENSELL_EVENT, log);
                OnTokenSellEventResponse typedResponse = new OnTokenSellEventResponse();
                typedResponse.log = log;
                typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ethereumEarned = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.tokensBurned = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenPrice = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.divRate = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<OnTokenSellEventResponse> onTokenSellEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ONTOKENSELL_EVENT));
        return onTokenSellEventObservable(filter);
    }

    public List<DivideEventResponse> getDivideEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DIVIDE_EVENT, transactionReceipt);
        ArrayList<DivideEventResponse> responses = new ArrayList<DivideEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DivideEventResponse typedResponse = new DivideEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.administrator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.totalToken = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.holderNumber = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DivideEventResponse> divideEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, DivideEventResponse>() {
            @Override
            public DivideEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DIVIDE_EVENT, log);
                DivideEventResponse typedResponse = new DivideEventResponse();
                typedResponse.log = log;
                typedResponse.administrator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.totalToken = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.holderNumber = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<DivideEventResponse> divideEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DIVIDE_EVENT));
        return divideEventObservable(filter);
    }

    public List<UserDividendRateEventResponse> getUserDividendRateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(USERDIVIDENDRATE_EVENT, transactionReceipt);
        ArrayList<UserDividendRateEventResponse> responses = new ArrayList<UserDividendRateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserDividendRateEventResponse typedResponse = new UserDividendRateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.divRate = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UserDividendRateEventResponse> userDividendRateEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, UserDividendRateEventResponse>() {
            @Override
            public UserDividendRateEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(USERDIVIDENDRATE_EVENT, log);
                UserDividendRateEventResponse typedResponse = new UserDividendRateEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.divRate = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<UserDividendRateEventResponse> userDividendRateEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USERDIVIDENDRATE_EVENT));
        return userDividendRateEventObservable(filter);
    }

    public List<OnReinvestmentEventResponse> getOnReinvestmentEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ONREINVESTMENT_EVENT, transactionReceipt);
        ArrayList<OnReinvestmentEventResponse> responses = new ArrayList<OnReinvestmentEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OnReinvestmentEventResponse typedResponse = new OnReinvestmentEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ethereumReinvested = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokensMinted = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OnReinvestmentEventResponse> onReinvestmentEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OnReinvestmentEventResponse>() {
            @Override
            public OnReinvestmentEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ONREINVESTMENT_EVENT, log);
                OnReinvestmentEventResponse typedResponse = new OnReinvestmentEventResponse();
                typedResponse.log = log;
                typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ethereumReinvested = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.tokensMinted = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<OnReinvestmentEventResponse> onReinvestmentEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ONREINVESTMENT_EVENT));
        return onReinvestmentEventObservable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventObservable(filter);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.tokenOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventObservable(filter);
    }

    public List<ReferralEventResponse> getReferralEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REFERRAL_EVENT, transactionReceipt);
        ArrayList<ReferralEventResponse> responses = new ArrayList<ReferralEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReferralEventResponse typedResponse = new ReferralEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.referrerBy = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.referrer = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amountReceived = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ReferralEventResponse> referralEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, ReferralEventResponse>() {
            @Override
            public ReferralEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REFERRAL_EVENT, log);
                ReferralEventResponse typedResponse = new ReferralEventResponse();
                typedResponse.log = log;
                typedResponse.referrerBy = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.referrer = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amountReceived = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ReferralEventResponse> referralEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REFERRAL_EVENT));
        return referralEventObservable(filter);
    }

    public List<AssetsDetailEventResponse> getAssetsDetailEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ASSETSDETAIL_EVENT, transactionReceipt);
        ArrayList<AssetsDetailEventResponse> responses = new ArrayList<AssetsDetailEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AssetsDetailEventResponse typedResponse = new AssetsDetailEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.buyer = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.referrer = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.referrerToken = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenHolder = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AssetsDetailEventResponse> assetsDetailEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, AssetsDetailEventResponse>() {
            @Override
            public AssetsDetailEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ASSETSDETAIL_EVENT, log);
                AssetsDetailEventResponse typedResponse = new AssetsDetailEventResponse();
                typedResponse.log = log;
                typedResponse.buyer = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.referrer = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.referrerToken = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenHolder = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<AssetsDetailEventResponse> assetsDetailEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ASSETSDETAIL_EVENT));
        return assetsDetailEventObservable(filter);
    }

    public List<DividendDetailEventResponse> getDividendDetailEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DIVIDENDDETAIL_EVENT, transactionReceipt);
        ArrayList<DividendDetailEventResponse> responses = new ArrayList<DividendDetailEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DividendDetailEventResponse typedResponse = new DividendDetailEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.referrerToken = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenHolder = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DividendDetailEventResponse> dividendDetailEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, DividendDetailEventResponse>() {
            @Override
            public DividendDetailEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DIVIDENDDETAIL_EVENT, log);
                DividendDetailEventResponse typedResponse = new DividendDetailEventResponse();
                typedResponse.log = log;
                typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.referrerToken = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.tokenHolder = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<DividendDetailEventResponse> dividendDetailEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DIVIDENDDETAIL_EVENT));
        return dividendDetailEventObservable(filter);
    }

    public static Skcoin_sol_Skcoin load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Skcoin_sol_Skcoin(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Skcoin_sol_Skcoin load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Skcoin_sol_Skcoin(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class OnTokenPurchaseEventResponse {
        public Log log;

        public String customerAddress;

        public BigInteger incomingEthereum;

        public BigInteger tokensMinted;

        public BigInteger tokenPrice;

        public BigInteger divChoice;

        public String referrer;
    }

    public static class OnTokenSellEventResponse {
        public Log log;

        public String customerAddress;

        public BigInteger ethereumEarned;

        public BigInteger tokensBurned;

        public BigInteger tokenPrice;

        public BigInteger divRate;
    }

    public static class DivideEventResponse {
        public Log log;

        public String administrator;

        public BigInteger totalToken;

        public BigInteger holderNumber;
    }

    public static class UserDividendRateEventResponse {
        public Log log;

        public String user;

        public BigInteger divRate;
    }

    public static class OnReinvestmentEventResponse {
        public Log log;

        public String customerAddress;

        public BigInteger ethereumReinvested;

        public BigInteger tokensMinted;
    }

    public static class TransferEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger tokens;
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String tokenOwner;

        public String spender;

        public BigInteger tokens;
    }

    public static class ReferralEventResponse {
        public Log log;

        public String referrerBy;

        public String referrer;

        public BigInteger amountReceived;
    }

    public static class AssetsDetailEventResponse {
        public Log log;

        public String buyer;

        public String referrer;

        public BigInteger referrerToken;

        public BigInteger tokenHolder;
    }

    public static class DividendDetailEventResponse {
        public Log log;

        public String customerAddress;

        public BigInteger referrerToken;

        public BigInteger tokenHolder;
    }
}
