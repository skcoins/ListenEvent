package com.softisland.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class Skcoin_sol_Skcoin extends Contract {
    private static final String BINARY = "68056bc75e2d6310000060005560c0604052600660808190527f536b636f696e000000000000000000000000000000000000000000000000000060a09081526200004d916001919062000211565b506040805180820190915260038082527f534b4300000000000000000000000000000000000000000000000000000000006020909201918252620000949160029162000211565b50600060038190556014556016805460ff19169055348015620000b657600080fd5b5060405160208062003101833981016040908152905160068054600160a060020a031916600160a060020a0390921691909117905533600090815260056020908152918120805460ff199081166001908117909255600c9093527f5d6016397a73f5e079297ac5a36fef17b4d9c3831618e63ab105738020ddd72080548416821790557f2cd9ebf6ff19cdd7ffcc447d7c7d47b5991f5c7392a04512134e765802361fa680548416821790557f9e6c92d7be355807bd948171438a5e65aaf9e4c36f1405c1b9ca25d27c4ea3a080548416821790557f55664edbebd57273ba1f6d1c017cd920bbceea562d5502a6837280a660edef9580548416821790557ff47a2f56f0955e689cdfc6405887e0f3452b74fbb1c4f20652e6c211a96d68b3805484168217905560329091527f74c83704300c65b1de76b9ee7537f3f330650a1d59eb262898de510c0c350be28054909216179055620002b6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025457805160ff191683800117855562000284565b8280016001018555821562000284579182015b828111156200028457825182559160200191906001019062000267565b506200029292915062000296565b5090565b620002b391905b808211156200029257600081556001016200029d565b90565b612e3b80620002c66000396000f3006080604052600436106102b35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610302578063095ea7b31461038c57806310d0ffdd146103c457806318160ddd146103ee5780631b1686b614610403578063214dda841461041857806323b872dd1461042d5780632542536314610457578063269a7c3f1461048857806327dffba6146104a45780632dec59ef146104b9578063313ce567146104d65780633c7d6f301461050157806343245816146105165780634b7503341461052e578063513920411461054357806354c993671461056457806356d399e81461058857806359c9e1181461059d5780635c658165146105bd5780635ccb5460146105e45780636135e084146105f9578063677342ce1461060e5780636a3a21191461062657806370a082311461062e57806376be15851461064f5780637b89eef214610670578063812039c6146106855780638328b6101461069a57806387c95058146106b257806395d89b41146106d8578063965447d9146106ed578063a3a06c54146104a4578063a5f2a15214610705578063a9059cbb1461072f578063aaaa950d14610753578063b53b8d7a1461076d578063b607068c14610782578063b84c824614610797578063ba93d5e5146107f0578063bcaa218e14610811578063c257c85114610826578063c47f00271461083e578063c4dbf62214610897578063c80a3aa6146108af578063cc03c34214610914578063ccb5336514610935578063d161b56a1461094a578063dd62ed3e1461095f578063e4849b3214610986578063e625d5151461099e578063e9fad8ee146109b3578063ecf56d82146109c8578063f088d547146109e0578063f42c56c2146109f4578063f8ead7cf14610a0c578063fdc89f7314610a2d578063ffcb1edb14610a45575b60165460009060ff1615156102c757600080fd5b50336000818152600d602052604090205460ff16156102f1576102eb346000610a5a565b506102ff565b6102fd60006014610c07565b505b50005b34801561030e57600080fd5b50610317610ce3565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610351578181015183820152602001610339565b50505050905090810190601f16801561037e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561039857600080fd5b506103b0600160a060020a0360043516602435610d70565b604080519115158252519081900360200190f35b3480156103d057600080fd5b506103dc600435610ddd565b60408051918252519081900360200190f35b3480156103fa57600080fd5b506103dc610e40565b34801561040f57600080fd5b506103dc610e47565b34801561042457600080fd5b506103b0610e4d565b34801561043957600080fd5b506103b0600160a060020a0360043581169060243516604435610e56565b34801561046357600080fd5b5061046c610ed6565b60408051600160a060020a039092168252519081900360200190f35b6104a2600160a060020a0360043581169060243516610ee5565b005b3480156104b057600080fd5b506104a2610ef5565b6103dc600435600160a060020a036024351660ff60443516610f22565b3480156104e257600080fd5b506104eb611072565b6040805160ff9092168252519081900360200190f35b34801561050d57600080fd5b506104a2611077565b34801561052257600080fd5b506103dc600435611099565b34801561053a57600080fd5b506103dc61126e565b34801561054f57600080fd5b506103dc600160a060020a0360043516611312565b34801561057057600080fd5b506103b0600160a060020a036004351660243561132d565b34801561059457600080fd5b506103dc6114d0565b6104a2600160a060020a036004358116906024351660ff604435166114d6565b3480156105c957600080fd5b506103dc600160a060020a036004358116906024351661156f565b3480156105f057600080fd5b506103dc61158c565b34801561060557600080fd5b506103dc611592565b34801561061a57600080fd5b506103dc6004356115a5565b6104a26115e0565b34801561063a57600080fd5b506103dc600160a060020a0360043516611600565b34801561065b57600080fd5b506103b0600160a060020a036004351661161b565b34801561067c57600080fd5b506103dc611630565b34801561069157600080fd5b506103dc611640565b3480156106a657600080fd5b506104a2600435611646565b3480156106be57600080fd5b506104a2600160a060020a0360043516602435151561167f565b3480156106e457600080fd5b506103176116c8565b3480156106f957600080fd5b506103dc600435611720565b34801561071157600080fd5b506104a2600160a060020a0360043581169060243516604435611734565b34801561073b57600080fd5b506103b0600160a060020a03600435166024356117f8565b6103dc600160a060020a036004351660ff60243516610c07565b34801561077957600080fd5b506104a2611850565b34801561078e57600080fd5b506104eb611bbd565b3480156107a357600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104a2943694929360249392840191908190840183828082843750949750611bfe9650505050505050565b3480156107fc57600080fd5b506104a2600160a060020a0360043516611c2f565b34801561081d57600080fd5b506103dc611c7c565b34801561083257600080fd5b506103dc600435611c87565b34801561084a57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104a2943694929360249392840191908190840183828082843750949750611cf29650505050505050565b3480156108a357600080fd5b506103dc600435611d23565b3480156108bb57600080fd5b506108c4611da9565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156109005781810151838201526020016108e8565b505050509050019250505060405180910390f35b34801561092057600080fd5b506104a2600160a060020a0360043516611e0b565b34801561094157600080fd5b506104a2611e91565b34801561095657600080fd5b506103dc611ecc565b34801561096b57600080fd5b506103dc600160a060020a0360043581169060243516611ed2565b34801561099257600080fd5b506104a2600435611efd565b3480156109aa57600080fd5b506103dc612102565b3480156109bf57600080fd5b506104a2612107565b3480156109d457600080fd5b506103dc600435612140565b6103dc600160a060020a0360043516612395565b348015610a0057600080fd5b506103dc6004356123db565b348015610a1857600080fd5b506103dc600160a060020a0360043516612415565b348015610a3957600080fd5b506103dc600435612456565b348015610a5157600080fd5b506103dc612464565b600080600080600080655af3107a400088101580610a825750600754600160a060020a031633145b1515610b1557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f547269656420746f206275792062656c6f7720746865206d696e20657468206260448201527f7579696e207468726573686f6c642e0000000000000000000000000000000000606482015290519081900360840190fd5b60165460ff161515610b3157610b2b888861246a565b50610bfc565b336000908152600e602052604090205460ff169250610b4f83611d23565b9150879050610b766002610b6a83606463ffffffff61265f16565b9063ffffffff61267616565b9350610b88818563ffffffff6126a816565b9050610b9381612140565b9450610b9f88886126ba565b50604080518981526020810187905280820184905260ff85166060820152600160a060020a0389166080820152905133917ffe3ac80ec95b3bbcf01b0b389cc27c089970282a6a8a95ac4fd7936603dc22d7919081900360a00190a25b505050505092915050565b601654600090819060ff161515610c4557503a640ba43b74008111801590610c3a5750680d8d726b7177a8000060125411155b1515610c4557600080fd5b60ff8084166000908152600c6020526040902054161515610c6557600080fd5b336000818152600d60209081526040808320805460ff19908116600117909155600e835292819020805460ff891694168417905580519384529083019190915280517fc95fc9f67beb97905ada724494d1acfcaa30a3c96b432a0eac1824899f9f97c29281900390910190a1610cdb3485610a5a565b505092915050565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610d685780601f10610d3d57610100808354040283529160200191610d68565b820191906000526020600020905b815481529060010190602001808311610d4b57829003601f168201915b505050505081565b336000818152600460209081526040808320600160a060020a03871680855290835281842086905581518681529151939493909284927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a3600191505b5092915050565b336000908152600e6020526040812054819081908190610e1a90606490610e0e90889060ff1663ffffffff61267616565b9063ffffffff61265f16565b9250610e2c858463ffffffff6126a816565b9150610e3782612140565b95945050505050565b6003545b90565b60135481565b60165460ff1681565b6000836402540be4008310801590610e865750600160a060020a0381166000908152600860205260409020548311155b8015610eb55750600160a060020a03811660009081526004602090815260408083203384529091529020548311155b1515610ec057600080fd5b610ecb858585612a8a565b506001949350505050565b600754600160a060020a031681565b610ef1828260146114d6565b5050565b3360009081526005602052604090205460ff161515610f1357600080fd5b6016805460ff19166001179055565b33600081815260086020908152604080832054600d9092528220549192918390819060ff168015610f54575060ff8616155b15610f6957610f633488610a5a565b50610f75565b610f738787610c07565b505b33600090815260086020526040902054610f8f90846126a8565b600754604080517f746f6b656e546f506f696e744279536b63436f6e74726163742875696e74323581527f362c616464726573732c75696e743235362900000000000000000000000000006020820152815190819003603201812063ffffffff7c0100000000000000000000000000000000000000000000000000000000918290049081169091028252600482018d9052336024830152604482018590529151939550600160a060020a03909216929091606480820192600092909190829003018183875af192505050905080151561106757600080fd5b509695505050505050565b601281565b60175462127500014211801561108e575060175415155b1515610f1357600080fd5b600080808080808080655af3107a400089101561111757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f547269656420746f2073656c6c20746f6f2066657720746f6b656e732e000000604482015290519081900360640190fd5b6011546003546000985088975011611131578896506111a7565b60115460035411801561114a5750601154896003540310155b15611157578895506111a7565b60115460035411801561116f57506011548960035403105b156111a2576011546003546111899163ffffffff6126a816565b955061119b898763ffffffff6126a816565b96506111a7565b600080fd5b85870189146111b257fe5b86156111de576111db670de0b6b3a7640000610e0e89660251e66909d00063ffffffff61267616565b94505b8515611254576112126003610e0e6002610b6a61120d61258f620f42400260035461265f90919063ffffffff16565b612456565b925061123f6003610e0e6002610b6a61120d61258f620f4240028c6003540361265f90919063ffffffff16565b9150611251838363ffffffff6126a816565b93505b508284016000811161126257fe5b98975050505050505050565b60165460009081908190819060ff16158061128c5750601254601354105b156112a057660251e66909d00092506112cf565b6112b066038d7ea4c68000612140565b9150816d314dc6448d9338c15b0a000000008115156112cb57fe5b0492505b61130a6112fd68010000000000000000610e0e6064610e0e6112f033612415565b899063ffffffff61267616565b849063ffffffff6126a816565b949350505050565b600160a060020a03166000908152600a602052604090205490565b6007546000908190600160a060020a0316331461134957600080fd5b600160a060020a03841660009081526008602052604090205483111561136e57600080fd5b61138c6064610e0e61137f87612415565b869063ffffffff61267616565b600160a060020a0385166000908152600860205260409020549091506113b8908463ffffffff6126a816565b600160a060020a0380861660009081526008602052604080822093909355600754909116815220546113f0908463ffffffff612cbf16565b600754600160a060020a039081166000908152600860209081526040808320949094559187168152600a909152205461142f908263ffffffff6126a816565b600160a060020a038086166000908152600a60205260408082209390935560075490911681522054611467908263ffffffff612cbf16565b60078054600160a060020a039081166000908152600a60209081526040918290209490945591548251878152925190821693918816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92908290030190a35060019392505050565b60005481565b6016546000908190819060ff1615156114ee57600080fd5b33600081815260086020908152604080832054600d90925290912054919450925060ff16801561151f575060ff8416155b156115345761152e3487610a5a565b50611540565b61153e8685610c07565b505b3360009081526008602052604090205461155a90836126a8565b9050611567338683611734565b505050505050565b600460209081526000928352604080842090915290825290205481565b60125481565b60003361159e81611312565b91505b5090565b80600260018201045b818110156115da5780915060028182858115156115c757fe5b04018115156115d257fe5b0490506115ae565b50919050565b3360009081526005602052604090205460ff1615156115fe57600080fd5b565b600160a060020a031660009081526008602052604090205490565b60056020526000908152604090205460ff1681565b600061163b33612415565b905090565b60125490565b3360009081526005602052604090205460ff16151561166457600080fd5b68056bc75e2d6310000081101561167a57600080fd5b600055565b3360009081526005602052604090205460ff16151561169d57600080fd5b600160a060020a03919091166000908152600560205260409020805460ff1916911515919091179055565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610d685780601f10610d3d57610100808354040283529160200191610d68565b600061172e6002830a6123db565b92915050565b600160a060020a03831633146117b0576402540be40081101580156117715750600160a060020a0383166000908152600860205260409020548111155b80156117a05750600160a060020a03831660009081526004602090815260408083203384529091529020548111155b15156117ab57600080fd5b6117e8565b6402540be40081101580156117dd5750600160a060020a0383166000908152600860205260409020548111155b15156117e857600080fd5b6117f3838383612a8a565b505050565b600080611803611c7c565b1161180d57600080fd5b6402540be40082101580156118315750336000908152600860205260409020548211155b151561183c57600080fd5b611847338484612a8a565b50600192915050565b33600090815260056020526040812054819081908190819081908190819060ff16151561187c57600080fd5b60165460ff16151561188d57600080fd5b6015549750600095505b601054861015611b645760108054879081106118af57fe5b600091825260209091200154600654600160a060020a039182169650168514156118d857611b59565b600160a060020a0385166000908152600860205260408120549094508410156119f857601454600160a060020a0386166000908152600a602052604090205460155461192f9291610e0e919063ffffffff61267616565b601454600160a060020a0387166000908152600a602052604090205491955061196391610e0e90879063ffffffff61267616565b601454909350611979908463ffffffff612cbf16565b601455600160a060020a0385166000908152600860205260409020546119a5908563ffffffff612cbf16565b600160a060020a038616600090815260086020908152604080832093909355600a905220546119da908463ffffffff612cbf16565b600160a060020a0386166000908152600a6020526040902055958301955b600160a060020a038516600090815260096020526040902054915083151580611a215750600082115b15611b0257601454600160a060020a0386166000908152600a6020526040902054611a589190610e0e90859063ffffffff61267616565b600160a060020a038616600090815260096020526040812055601454909150611a87908263ffffffff612cbf16565b601455600160a060020a038516600090815260086020526040902054611ab3908363ffffffff612cbf16565b600160a060020a038616600090815260086020908152604080832093909355600a90522054611ae8908263ffffffff612cbf16565b600160a060020a0386166000908152600a60205260409020555b83151580611b105750600082115b15611b595760408051838152602081018690528151600160a060020a038816927ff23c0d9317f6be471607052a1b5b49e380a207ec651da595ba9f882470f72835928290030190a25b600190950194611897565b6015548714611b6f57fe5b6000601555601054604080518a81526020810192909252805133927f6925a594cdedf404fb393921c171ac5a20037af918e28f8abc05c58334c2090c92908290030190a25050505050505050565b336000818152600d602052604081205490919060ff161515611bde57600080fd5b600160a060020a03166000908152600e602052604090205460ff16919050565b3360009081526005602052604090205460ff161515611c1c57600080fd5b8051610ef1906002906020840190612d5b565b3360009081526005602052604090205460ff161515611c4d57600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600061163b33611600565b60008060008060006003548611151515611ca057600080fd5b611ca986611099565b9350611cb433612415565b9250611cd668010000000000000000610e0e606481888863ffffffff61267616565b9150611ce8848363ffffffff6126a816565b9695505050505050565b3360009081526005602052604090205460ff161515611d1057600080fd5b8051610ef1906001906020840190612d5b565b60165460009081908190819060ff161580611d415750601254601354105b15611d5557660251e66909d0009250611d84565b611d6566038d7ea4c68000612140565b9150816d314dc6448d9338c15b0a00000000811515611d8057fe5b0492505b610e3783611d9d6064610e0e838a63ffffffff61267616565b9063ffffffff612cbf16565b60606010805480602002602001604051908101604052809291908181526020018280548015611e0157602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611de3575b5050505050905090565b3360009081526005602052604090205460ff161515611e2957600080fd5b60068054600160a060020a0392831673ffffffffffffffffffffffffffffffffffffffff199091161780825582166000908152600d60209081526040808320805460ff1990811660011790915593549094168252600e90529190912080549091166032179055565b3360009081526005602052604090205460ff161515611eaf57600080fd5b60175415611ebc57600080fd5b6016805460ff1916905542601755565b60115481565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b6000806000806000806000611f10611c7c565b11611f1a57600080fd5b60165460ff161515611f2b57600080fd5b33600090815260086020526040902054871115611f4757600080fd5b869550611f5261126e565b9450611f5d33612415565b9350680200000000000000008410801590611f815750683200000000000000008411155b1515611f8c57600080fd5b611fa16064610e0e888763ffffffff61267616565b95869003959250611fc568010000000000000000610e0e888763ffffffff61267616565b9150611fd086611099565b9050601354811115611fe6576000601355611ff0565b6013805482900390555b600354612003908763ffffffff6126a816565b600355601454612019908363ffffffff6126a816565b6014553360009081526008602052604090205461203c908763ffffffff6126a816565b33600090815260086020908152604080832093909355600a90522054612068908363ffffffff6126a816565b336000818152600a60205260408082209390935560158054870190559151909183156108fc02918491818181858888f193505050501580156120ae573d6000803e3d6000fd5b50604080518281526020810189905280820187905260608101869052905133917f9e7640c8084933448e21479747bae0ff2b839fc1969425ea177bd30df8b324c2919081900360800190a250505050505050565b303190565b601654600090819060ff16151561211d57600080fd5b50503360008181526008602052604081205490811115610ef157610ef181611efd565b6000808080808080808080655af3107a40008b116121e557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f547269656420746f2062757920746f6b656e73207769746820746f6f206c697460448201527f746c65206574682e000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60165460ff161515612219576122088b660251e66909d00063ffffffff61265f16565b670de0b6b3a7640000029950612387565b60125460135460009a508a995010612233578a97506122a0565b60125460135410801561224c57506012548b6013540111155b15612259578a98506122a0565b60125460135410801561227157506012548b60135401115b156111a25760135460125461228b9163ffffffff6126a816565b985061229d8b8a63ffffffff6126a816565b97505b8888018b146122ab57fe5b6000965086955088156122de576122db660251e66909d000610e0e8b670de0b6b3a764000063ffffffff61267616565b96505b8715612375578861230e6003610e0e6002610b6a61120d61258f620f42400260035461265f90919063ffffffff16565b019450878501935061233a61258f610b6a6123356002610e0e8a600363ffffffff61267616565b611720565b925061235b61258f610b6a6123356002610e0e89600363ffffffff61267616565b915061236d828463ffffffff6126a816565b620f42400295505b508585016000811161238357fe5b8099505b505050505050505050919050565b601654600090819060ff1615156123ab57600080fd5b50336000818152600d602052604090205460ff1615156123ca57600080fd5b6123d43484610a5a565b5050919050565b80600360018201045b818110156115da578091506003816002028283028581151561240257fe5b040181151561240d57fe5b0490506123e4565b600160a060020a038116600090815260086020908152604080832054600a90925282205461172e91680100000000000000009091029063ffffffff61265f16565b600061172e6003830a6115a5565b60145490565b601654600090819081908190819060ff161561248557600080fd5b86915061249e6002610b6a84606463ffffffff61265f16565b93506124b0828563ffffffff6126a816565b91506124bb82612140565b6003549093506124d1908463ffffffff612cbf16565b6003556013546124e7908363ffffffff612cbf16565b601355601280548301908190556011805485019055680d8d726b7177a80000101561251157600080fd5b32331461251d57600080fd5b336000908152600b602052604090208054830190819055670de0b6b3a7640000101561254857600080fd5b680d8d726b7177a800006012541415612569576016805460ff191660011790555b33600090815260086020526040902054612589908463ffffffff612cbf16565b336000818152600860205260409020919091556125a590612cce565b83156125e757600654604051600160a060020a039091169085156108fc029086906000818181858888f193505050501580156125e5573d6000803e3d6000fd5b505b5082810186900380156125f657fe5b6040805188815260208101859052660251e66909d0008183015260006060820152600160a060020a0388166080820152905133917ffe3ac80ec95b3bbcf01b0b389cc27c089970282a6a8a95ac4fd7936603dc22d7919081900360a00190a25050505092915050565b600080828481151561266d57fe5b04949350505050565b6000808315156126895760009150610dd6565b5082820282848281151561269957fe5b04146126a157fe5b9392505050565b6000828211156126b457fe5b50900390565b6000806000806000806000806000806000601660009054906101000a900460ff1615156126e657600080fd5b600099508998508897506127066002610b6a84606463ffffffff61265f16565b9250612718828463ffffffff6126a816565b915061272382612140565b336000908152600e602052604090205490955061275190606490610e0e90859060ff1663ffffffff61267616565b9650612763828863ffffffff6126a816565b915061276e82612140565b9350612780858563ffffffff6126a816565b600354909650612796908663ffffffff612cbf16565b6003556013546127ac908363ffffffff612cbf16565b60138190556127c1908863ffffffff612cbf16565b601355600160a060020a038c16158015906127e55750600160a060020a038c163314155b801561280a575060008054600160a060020a038e168252600860205260409091205410155b1561286b576128256064610e0e88601e63ffffffff61267616565b600160a060020a038d16600090815260096020526040902054909a50612851908b63ffffffff612cbf16565b600160a060020a038d166000908152600960205260409020555b6128816064610e0e88603c63ffffffff61267616565b98506128a389612897888d63ffffffff6126a816565b9063ffffffff6126a816565b6015549098506128b9908a63ffffffff612cbf16565b601555600654600160a060020a03166000908152600860205260409020546128e7908963ffffffff612cbf16565b600654600160a060020a0316600090815260086020526040902055821561294457600654604051600160a060020a039091169084156108fc029085906000818181858888f19350505050158015612942573d6000803e3d6000fd5b505b33600090815260086020526040902054612964908563ffffffff612cbf16565b33600090815260086020908152604080832093909355600e905220546129b49061299890869060ff1663ffffffff61267616565b336000908152600a60205260409020549063ffffffff612cbf16565b336000908152600a6020908152604080832093909355600e905220546129f7906129e890869060ff1663ffffffff61267616565b6014549063ffffffff612cbf16565b601455612a0333612cce565b5081810186018c90038015612a1457fe5b50868901880183018490038015612a2757fe5b60408051600160a060020a038e168152602081018c90528082018b9052606081018a9052905133917f1f08edee2b9a7c01b7fe8e6c576a0aefc03bbd94ce52922eaebf0340f9f8f399919081900360800190a25050505050505050505092915050565b60008080600160a060020a0385161515612aa357600080fd5b859250839150612ac76064610e0e612aba86612415565b859063ffffffff61267616565b9050600160a060020a0383163314612b0457600160a060020a03831660009081526004602090815260408083203384529091529020805485900390555b600160a060020a038316600090815260086020526040902054612b2d908363ffffffff6126a816565b600160a060020a038085166000908152600860205260408082209390935590871681522054612b62908363ffffffff612cbf16565b600160a060020a038087166000908152600860209081526040808320949094559186168152600a9091522054612b9e908263ffffffff6126a816565b600160a060020a038085166000908152600a60205260408082209390935590871681522054612bd3908263ffffffff612cbf16565b600160a060020a0386166000908152600a6020526040902055612bf583612cce565b612bfe85612cce565b600160a060020a0385166000908152600d602052604090205460ff161515612c6c57600160a060020a038086166000818152600d60209081526040808320805460ff199081166001179091559488168352600e909152808220549282529020805490921660ff919091161790555b84600160a060020a031683600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3505050505050565b6000828201838110156126a157fe5b600160a060020a0381166000908152600f60205260409020541515612d58576010805490612cff9060018301612dd5565b600160a060020a0382166000908152600f60205260409020819055601080548392908110612d2957fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612d9c57805160ff1916838001178555612dc9565b82800160010185558215612dc9579182015b82811115612dc9578251825591602001919060010190612dae565b506115a1929150612df5565b8154818355818111156117f3576000838152602090206117f39181019083015b610e4491905b808211156115a15760008155600101612dfb5600a165627a7a723058209b937ae71e4a04cf53f9dbc852fcab0c46b09c513e356e50dccd82b9346c64220029";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_CALCULATETOKENSRECEIVED = "calculateTokensReceived";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_CURRENTETHINVESTED = "currentEthInvested";

    public static final String FUNC_REGULARPHASE = "regularPhase";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_BANKROLLADDRESS = "bankrollAddress";

    public static final String FUNC_BUYANDTRANSFER = "buyAndTransfer";

    public static final String FUNC_STARTREGULARPHASE = "startRegularPhase";

    public static final String FUNC_ETHBUYGAMEPOINTS = "ethBuyGamePoints";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_PUBLICSTARTREGULARPHASE = "publicStartRegularPhase";

    public static final String FUNC_TOKENSTOETHER_ = "tokensToEther_";

    public static final String FUNC_SELLPRICE = "sellPrice";

    public static final String FUNC_GETDIVIDENDTOKENBALANCEOF = "getDividendTokenBalanceOf";

    public static final String FUNC_REDEEMGAMEPOINTS = "redeemGamePoints";

    public static final String FUNC_STAKINGREQUIREMENT = "stakingRequirement";

    public static final String FUNC_ALLOWED = "allowed";

    public static final String FUNC_ETHINVESTEDDURINGICO = "ethInvestedDuringICO";

    public static final String FUNC_MYDIVIDENDTOKENS = "myDividendTokens";

    public static final String FUNC_SQRT = "sqrt";

    public static final String FUNC_INJECTETHER = "injectEther";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_ADMINISTRATORS = "administrators";

    public static final String FUNC_GETMYAVERAGEDIVIDENDRATE = "getMyAverageDividendRate";

    public static final String FUNC_TOTALETHERICORECEIVED = "totalEtherICOReceived";

    public static final String FUNC_SETSTAKINGREQUIREMENT = "setStakingRequirement";

    public static final String FUNC_SETADMINISTRATOR = "setAdministrator";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOPOWEROFTWOTHIRDS = "toPowerOfTwoThirds";

    public static final String FUNC_ENDICOPHASE = "endICOPhase";

    public static final String FUNC_TRANSFERTO = "transferTo";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_BUYANDSETDIVPERCENTAGE = "buyAndSetDivPercentage";

    public static final String FUNC_DIVIDE = "divide";

    public static final String FUNC_GETMYDIVIDENDRATE = "getMyDividendRate";

    public static final String FUNC_SETSYMBOL = "setSymbol";

    public static final String FUNC_SETBANKROLLADDRESS = "setBankrollAddress";

    public static final String FUNC_MYFRONTENDTOKENS = "myFrontEndTokens";

    public static final String FUNC_CALCULATEETHERRECEIVED = "calculateEtherReceived";

    public static final String FUNC_SETNAME = "setName";

    public static final String FUNC_BUYPRICE = "buyPrice";

    public static final String FUNC_ALLHOLDERS = "allHolders";

    public static final String FUNC_SETPLATFORMADDRESS = "setPlatformAddress";

    public static final String FUNC_STARTICOPHASE = "startICOPhase";

    public static final String FUNC_TOKENSMINTEDDURINGICO = "tokensMintedDuringICO";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_SELL = "sell";

    public static final String FUNC_TOTALETHERBALANCE = "totalEtherBalance";

    public static final String FUNC_EXIT = "exit";

    public static final String FUNC_ETHERTOTOKENS_ = "etherToTokens_";

    public static final String FUNC_BUY = "buy";

    public static final String FUNC_CBRT = "cbrt";

    public static final String FUNC_GETUSERAVERAGEDIVIDENDRATE = "getUserAverageDividendRate";

    public static final String FUNC_TOPOWEROFTHREEHALVES = "toPowerOfThreeHalves";

    public static final String FUNC_GETDIVIDENDTOKENSUPPLY = "getDividendTokenSupply";

    public static final Event ONTOKENPURCHASE_EVENT = new Event("OnTokenPurchase", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ONTOKENSELL_EVENT = new Event("OnTokenSell", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DIVIDE_EVENT = new Event("Divide", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event USERDIVIDENDRATE_EVENT = new Event("UserDividendRate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ASSETSDETAIL_EVENT = new Event("AssetsDetail", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DIVIDENDDETAIL_EVENT = new Event("DividendDetail", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    protected Skcoin_sol_Skcoin(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Skcoin_sol_Skcoin(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approve(String spender, BigInteger tokens) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(spender), 
                new org.web3j.abi.datatypes.generated.Uint256(tokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> calculateTokensReceived(BigInteger _etherToSpend) {
        final Function function = new Function(FUNC_CALCULATETOKENSRECEIVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_etherToSpend)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> currentEthInvested() {
        final Function function = new Function(FUNC_CURRENTETHINVESTED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> regularPhase() {
        final Function function = new Function(FUNC_REGULARPHASE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String _from, String _toAddress, BigInteger _amountOfTokens) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_toAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(_amountOfTokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> bankrollAddress() {
        final Function function = new Function(FUNC_BANKROLLADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> buyAndTransfer(String _referredBy, String target, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BUYANDTRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_referredBy), 
                new org.web3j.abi.datatypes.Address(target)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> startRegularPhase() {
        final Function function = new Function(
                FUNC_STARTREGULARPHASE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> ethBuyGamePoints(BigInteger _id, String _referredBy, BigInteger divChoice, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_ETHBUYGAMEPOINTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id), 
                new org.web3j.abi.datatypes.Address(_referredBy), 
                new org.web3j.abi.datatypes.generated.Uint8(divChoice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> publicStartRegularPhase() {
        final Function function = new Function(
                FUNC_PUBLICSTARTREGULARPHASE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> tokensToEther_(BigInteger _tokens) {
        final Function function = new Function(FUNC_TOKENSTOETHER_, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokens)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> sellPrice() {
        final Function function = new Function(FUNC_SELLPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getDividendTokenBalanceOf(String _customerAddress) {
        final Function function = new Function(FUNC_GETDIVIDENDTOKENBALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_customerAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> redeemGamePoints(String _caller, BigInteger _amountOfTokens) {
        final Function function = new Function(
                FUNC_REDEEMGAMEPOINTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_caller), 
                new org.web3j.abi.datatypes.generated.Uint256(_amountOfTokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> stakingRequirement() {
        final Function function = new Function(FUNC_STAKINGREQUIREMENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> buyAndTransfer(String _referredBy, String target, BigInteger divChoice, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BUYANDTRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_referredBy), 
                new org.web3j.abi.datatypes.Address(target), 
                new org.web3j.abi.datatypes.generated.Uint8(divChoice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> allowed(String param0, String param1) {
        final Function function = new Function(FUNC_ALLOWED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.Address(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> ethInvestedDuringICO() {
        final Function function = new Function(FUNC_ETHINVESTEDDURINGICO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> myDividendTokens() {
        final Function function = new Function(FUNC_MYDIVIDENDTOKENS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> sqrt(BigInteger x) {
        final Function function = new Function(FUNC_SQRT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> injectEther(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_INJECTETHER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> balanceOf(String _customerAddress) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_customerAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> administrators(String param0) {
        final Function function = new Function(FUNC_ADMINISTRATORS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> getMyAverageDividendRate() {
        final Function function = new Function(FUNC_GETMYAVERAGEDIVIDENDRATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> totalEtherICOReceived() {
        final Function function = new Function(FUNC_TOTALETHERICORECEIVED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setStakingRequirement(BigInteger _amountOfTokens) {
        final Function function = new Function(
                FUNC_SETSTAKINGREQUIREMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amountOfTokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setAdministrator(String _newAdmin, Boolean _status) {
        final Function function = new Function(
                FUNC_SETADMINISTRATOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_newAdmin), 
                new org.web3j.abi.datatypes.Bool(_status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> toPowerOfTwoThirds(BigInteger x) {
        final Function function = new Function(FUNC_TOPOWEROFTWOTHIRDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> endICOPhase() {
        final Function function = new Function(
                FUNC_ENDICOPHASE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferTo(String _from, String _to, BigInteger _amountOfTokens) {
        final Function function = new Function(
                FUNC_TRANSFERTO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_amountOfTokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transfer(String _toAddress, BigInteger _amountOfTokens) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_toAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(_amountOfTokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> buyAndSetDivPercentage(String _referredBy, BigInteger _divChoice, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BUYANDSETDIVPERCENTAGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_referredBy), 
                new org.web3j.abi.datatypes.generated.Uint8(_divChoice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> divide() {
        final Function function = new Function(
                FUNC_DIVIDE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getMyDividendRate() {
        final Function function = new Function(FUNC_GETMYDIVIDENDRATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setSymbol(String _symbol) {
        final Function function = new Function(
                FUNC_SETSYMBOL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_symbol)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setBankrollAddress(String _bankrollAddress) {
        final Function function = new Function(
                FUNC_SETBANKROLLADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_bankrollAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> myFrontEndTokens() {
        final Function function = new Function(FUNC_MYFRONTENDTOKENS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> calculateEtherReceived(BigInteger _tokensToSell) {
        final Function function = new Function(FUNC_CALCULATEETHERRECEIVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokensToSell)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setName(String _name) {
        final Function function = new Function(
                FUNC_SETNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> buyPrice(BigInteger dividendRate) {
        final Function function = new Function(FUNC_BUYPRICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(dividendRate)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<List> allHolders() {
        final Function function = new Function(FUNC_ALLHOLDERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setPlatformAddress(String _platformAddress) {
        final Function function = new Function(
                FUNC_SETPLATFORMADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_platformAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> startICOPhase() {
        final Function function = new Function(
                FUNC_STARTICOPHASE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> tokensMintedDuringICO() {
        final Function function = new Function(FUNC_TOKENSMINTEDDURINGICO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> allowance(String _owner, String _spender) {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.Address(_spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> sell(BigInteger _amountOfTokens) {
        final Function function = new Function(
                FUNC_SELL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amountOfTokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalEtherBalance() {
        final Function function = new Function(FUNC_TOTALETHERBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> exit() {
        final Function function = new Function(
                FUNC_EXIT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> etherToTokens_(BigInteger _etherAmount) {
        final Function function = new Function(FUNC_ETHERTOTOKENS_, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_etherAmount)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> buy(String _referredBy, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BUY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_referredBy)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> cbrt(BigInteger x) {
        final Function function = new Function(FUNC_CBRT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getUserAverageDividendRate(String user) {
        final Function function = new Function(FUNC_GETUSERAVERAGEDIVIDENDRATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> toPowerOfThreeHalves(BigInteger x) {
        final Function function = new Function(FUNC_TOPOWEROFTHREEHALVES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(x)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getDividendTokenSupply() {
        final Function function = new Function(FUNC_GETDIVIDENDTOKENSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<Skcoin_sol_Skcoin> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _platformAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_platformAddress)));
        return deployRemoteCall(Skcoin_sol_Skcoin.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<Skcoin_sol_Skcoin> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _platformAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_platformAddress)));
        return deployRemoteCall(Skcoin_sol_Skcoin.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<OnTokenPurchaseEventResponse> getOnTokenPurchaseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ONTOKENPURCHASE_EVENT, transactionReceipt);
        ArrayList<OnTokenPurchaseEventResponse> responses = new ArrayList<OnTokenPurchaseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OnTokenPurchaseEventResponse typedResponse = new OnTokenPurchaseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.incomingEthereum = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokensMinted = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenPrice = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.divChoice = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.referrer = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OnTokenPurchaseEventResponse> onTokenPurchaseEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OnTokenPurchaseEventResponse>() {
            @Override
            public OnTokenPurchaseEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ONTOKENPURCHASE_EVENT, log);
                OnTokenPurchaseEventResponse typedResponse = new OnTokenPurchaseEventResponse();
                typedResponse.log = log;
                typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.incomingEthereum = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.tokensMinted = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenPrice = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.divChoice = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.referrer = (String) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<OnTokenPurchaseEventResponse> onTokenPurchaseEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ONTOKENPURCHASE_EVENT));
        return onTokenPurchaseEventObservable(filter);
    }

    public List<OnTokenSellEventResponse> getOnTokenSellEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ONTOKENSELL_EVENT, transactionReceipt);
        ArrayList<OnTokenSellEventResponse> responses = new ArrayList<OnTokenSellEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OnTokenSellEventResponse typedResponse = new OnTokenSellEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ethereumEarned = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokensBurned = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenPrice = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.divRate = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OnTokenSellEventResponse> onTokenSellEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, OnTokenSellEventResponse>() {
            @Override
            public OnTokenSellEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ONTOKENSELL_EVENT, log);
                OnTokenSellEventResponse typedResponse = new OnTokenSellEventResponse();
                typedResponse.log = log;
                typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.ethereumEarned = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.tokensBurned = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenPrice = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.divRate = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<OnTokenSellEventResponse> onTokenSellEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ONTOKENSELL_EVENT));
        return onTokenSellEventObservable(filter);
    }

    public List<DivideEventResponse> getDivideEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DIVIDE_EVENT, transactionReceipt);
        ArrayList<DivideEventResponse> responses = new ArrayList<DivideEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DivideEventResponse typedResponse = new DivideEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.administrator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.totalToken = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.holderNumber = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DivideEventResponse> divideEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, DivideEventResponse>() {
            @Override
            public DivideEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DIVIDE_EVENT, log);
                DivideEventResponse typedResponse = new DivideEventResponse();
                typedResponse.log = log;
                typedResponse.administrator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.totalToken = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.holderNumber = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<DivideEventResponse> divideEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DIVIDE_EVENT));
        return divideEventObservable(filter);
    }

    public List<UserDividendRateEventResponse> getUserDividendRateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(USERDIVIDENDRATE_EVENT, transactionReceipt);
        ArrayList<UserDividendRateEventResponse> responses = new ArrayList<UserDividendRateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserDividendRateEventResponse typedResponse = new UserDividendRateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.divRate = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UserDividendRateEventResponse> userDividendRateEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, UserDividendRateEventResponse>() {
            @Override
            public UserDividendRateEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(USERDIVIDENDRATE_EVENT, log);
                UserDividendRateEventResponse typedResponse = new UserDividendRateEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.divRate = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<UserDividendRateEventResponse> userDividendRateEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USERDIVIDENDRATE_EVENT));
        return userDividendRateEventObservable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventObservable(filter);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.tokenOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokens = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventObservable(filter);
    }

    public List<AssetsDetailEventResponse> getAssetsDetailEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ASSETSDETAIL_EVENT, transactionReceipt);
        ArrayList<AssetsDetailEventResponse> responses = new ArrayList<AssetsDetailEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AssetsDetailEventResponse typedResponse = new AssetsDetailEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.buyer = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.referrer = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.referrerToken = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenHolder = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.toPlatformToken = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AssetsDetailEventResponse> assetsDetailEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, AssetsDetailEventResponse>() {
            @Override
            public AssetsDetailEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ASSETSDETAIL_EVENT, log);
                AssetsDetailEventResponse typedResponse = new AssetsDetailEventResponse();
                typedResponse.log = log;
                typedResponse.buyer = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.referrer = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.referrerToken = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenHolder = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.toPlatformToken = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<AssetsDetailEventResponse> assetsDetailEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ASSETSDETAIL_EVENT));
        return assetsDetailEventObservable(filter);
    }

    public List<DividendDetailEventResponse> getDividendDetailEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DIVIDENDDETAIL_EVENT, transactionReceipt);
        ArrayList<DividendDetailEventResponse> responses = new ArrayList<DividendDetailEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DividendDetailEventResponse typedResponse = new DividendDetailEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.referrerToken = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenHolder = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DividendDetailEventResponse> dividendDetailEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, DividendDetailEventResponse>() {
            @Override
            public DividendDetailEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DIVIDENDDETAIL_EVENT, log);
                DividendDetailEventResponse typedResponse = new DividendDetailEventResponse();
                typedResponse.log = log;
                typedResponse.customerAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.referrerToken = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.tokenHolder = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<DividendDetailEventResponse> dividendDetailEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DIVIDENDDETAIL_EVENT));
        return dividendDetailEventObservable(filter);
    }

    public static Skcoin_sol_Skcoin load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Skcoin_sol_Skcoin(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Skcoin_sol_Skcoin load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Skcoin_sol_Skcoin(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class OnTokenPurchaseEventResponse {
        public Log log;

        public String customerAddress;

        public BigInteger incomingEthereum;

        public BigInteger tokensMinted;

        public BigInteger tokenPrice;

        public BigInteger divChoice;

        public String referrer;
    }

    public static class OnTokenSellEventResponse {
        public Log log;

        public String customerAddress;

        public BigInteger ethereumEarned;

        public BigInteger tokensBurned;

        public BigInteger tokenPrice;

        public BigInteger divRate;
    }

    public static class DivideEventResponse {
        public Log log;

        public String administrator;

        public BigInteger totalToken;

        public BigInteger holderNumber;
    }

    public static class UserDividendRateEventResponse {
        public Log log;

        public String user;

        public BigInteger divRate;
    }

    public static class TransferEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger tokens;
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String tokenOwner;

        public String spender;

        public BigInteger tokens;
    }

    public static class AssetsDetailEventResponse {
        public Log log;

        public String buyer;

        public String referrer;

        public BigInteger referrerToken;

        public BigInteger tokenHolder;

        public BigInteger toPlatformToken;
    }

    public static class DividendDetailEventResponse {
        public Log log;

        public String customerAddress;

        public BigInteger referrerToken;

        public BigInteger tokenHolder;
    }
}
